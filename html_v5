<!DOCTYPE html>
<html>
<head>
    <title>Text Highlighter</title>
    <style>
        .highlight {
            background-color: yellow;
        }
        .clickable-section {
            cursor: pointer;
            color: blue;
            text-decoration: underline;
        }
    </style>
    <script>
        // Global array to store previously found highlight ranges
        let highlightedRanges = [];

        function removeHighlights() {
            let highlighted = document.querySelectorAll('.highlight');
            highlighted.forEach(el => {
                let parent = el.parentNode;
                while (el.firstChild) {
                    parent.insertBefore(el.firstChild, el);
                }
                parent.removeChild(el);
            });
        }

        function getTextNodesUnder(el) {
            let n, a = [], walk = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false);
            while ((n = walk.nextNode())) a.push(n);
            return a;
        }

        function extractHighlightedFragment(startNode, startOffset, endNode, endOffset) {
            let range = document.createRange();
            range.setStart(startNode, startOffset);
            range.setEnd(endNode, endOffset);
            return range.cloneContents();
        }

        function highlightRange(startIndex, endIndex) {
            let textNodes = getTextNodesUnder(document.body);
            let currentOffset = 0;
            let startNode, startOffset;
            for (let node of textNodes) {
                let length = node.nodeValue.length;
                if (currentOffset + length > startIndex) {
                    startNode = node;
                    startOffset = startIndex - currentOffset;
                    break;
                }
                currentOffset += length;
            }

            currentOffset = 0;
            let endNode, endOffset;
            for (let node of textNodes) {
                let length = node.nodeValue.length;
                if (currentOffset + length >= endIndex) {
                    endNode = node;
                    endOffset = endIndex - currentOffset;
                    break;
                }
                currentOffset += length;
            }

            let highlightSpan = document.createElement('span');
            highlightSpan.className = 'highlight';
            let highlightedFragment = extractHighlightedFragment(startNode, startOffset, endNode, endOffset);
            let origRange = document.createRange();
            origRange.setStart(startNode, startOffset);
            origRange.setEnd(endNode, endOffset);
            origRange.deleteContents();
            highlightSpan.appendChild(highlightedFragment);
            origRange.insertNode(highlightSpan);
        }

        function overlapsHighlightedRanges(start, end) {
            for (let r of highlightedRanges) {
                if (!(end <= r.start || start >= r.end)) {
                    return true;
                }
            }
            return false;
        }

        function highlightNextOccurrence(searchString) {
            if (!searchString) return;
            removeHighlights();
            let textNodes = getTextNodesUnder(document.body);
            let fullText = textNodes.map(n => n.nodeValue).join('');
            let index = 0, foundStart = -1;
            while ((index = fullText.indexOf(searchString, index)) !== -1) {
                let start = index;
                let end = index + searchString.length;
                if (!overlapsHighlightedRanges(start, end)) {
                    foundStart = start;
                    break;
                }
                index += searchString.length;
            }
            if (foundStart === -1) return;
            let foundEnd = foundStart + searchString.length;
            highlightRange(foundStart, foundEnd);
            highlightedRanges.push({start: foundStart, end: foundEnd});
        }

        function resetHighlights() {
            highlightedRanges = [];
            removeHighlights();
        }

        function setAudioTime(startTime) {
            // Trigger the Python backend to synchronize audio time
            window.external.invoke('set_audio_time', startTime);
        }

        // Adding clickable sections dynamically based on subtitles
        function createClickableSections() {
            let sections = [
                {time: "00:00:00", text: "KULLANMA TALİMATI"},
                {time: "00:00:02", text: "NICORETTE INVISI 10 mg/16 saat transdermal flaster"},
                {time: "00:00:07", text: "Cilt üzerine uygulanır."},
                {time: "00:00:09", text: "Etkin madde: Her bir banttan 16 saatlik kullanım sırasında 10 mg nikotin salıverilir."}
            ];
            let container = document.getElementById('sections');
            sections.forEach(section => {
                let link = document.createElement('a');
                link.className = 'clickable-section';
                link.textContent = section.text;
                link.href = "javascript:void(0);";
                link.onclick = () => {
                    setAudioTime(section.time);
                    highlightNextOccurrence(section.text);
                };
                container.appendChild(link);
                container.appendChild(document.createElement('br'));
            });
        }

        window.onload = createClickableSections;
    </script>
</head>
<body>
<h1>KULLANMA TALİMATI</h1>
    <h2>NICORETTE INVISI 10 mg/16 saat transdermal flaster</h2>
    <div id="sections"></div> <!-- Container for clickable sections -->
    <p>Cilt üzerine uygulanır.</p>
    <p><b>Etkin madde:</b> Her bir banttan 16 saatlik kullanım sırasında 10 mg nikotin salıverilir.</p>
    <p><b>Yardımcı maddeler:</b> Trigliseritler (orta zincir uzunluğunda), bazik bütillenmiş metakrilat kopolimer, polietilentereftalat film (PET), akrilik yapışkan solüsyon, potasyum hidroksit, kroskarmelloz sodyum, alüminyum asetilasetonat, bir yüzü alüminyumlanmış, her iki yüzü silikonlanmış polietilen tereftalat (PET) film.</p>
</body>
</html>
