import os
import sys
import time
import subprocess
import pygame
import pysrt
import json
from PyQt5.QtCore import QUrl, QTimer, pyqtSlot
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QHBoxLayout, QMessageBox, QListWidget, QLabel, QGridLayout, QFileDialog

class AudioPlayer:
    def __init__(self, audio_file, subtitles_file):
        pygame.mixer.init()
        self.audio_file = audio_file
        self.subtitles = pysrt.open(subtitles_file)
        self.is_paused = False
        self.is_playing = False
        self.current_subtitle_index = 0
        self.webview = None
        self.start_time = None
        self.paused_time = 0
        self.section_start_time = 0
        self.section_end_time = None

    def play_audio(self):
        if not os.path.exists(self.audio_file):
            self.show_error(f"Audio file not found: {self.audio_file}")
            return
        if not self.is_paused:
            pygame.mixer.music.load(self.audio_file)
            pygame.mixer.music.play(start=self.section_start_time)
            self.start_time = time.time() - self.section_start_time
        else:
            pygame.mixer.music.unpause()
            self.start_time = time.time() - self.paused_time
        self.is_playing = True
        self.is_paused = False
        QTimer.singleShot(0, self.update_subtitles)

    def pause_audio(self):
        if self.is_playing:
            pygame.mixer.music.pause()
            self.is_paused = True
            self.is_playing = False
            self.paused_time = time.time() - self.start_time

    def stop_audio(self):
        pygame.mixer.music.stop()
        self.is_playing = False
        self.is_paused = False
        self.paused_time = 0
        self.current_subtitle_index = 0
        if self.webview:
            self.webview.page().runJavaScript('resetHighlights()')

    def update_subtitles(self):
        if not self.is_playing:
            return
        current_time = time.time() - self.start_time
        if self.section_end_time and current_time >= self.section_end_time:
            self.stop_audio()
            return
        while self.current_subtitle_index < len(self.subtitles):
            subtitle = self.subtitles[self.current_subtitle_index]
            start_sec = subtitle.start.ordinal / 1000
            end_sec = subtitle.end.ordinal / 1000
            if start_sec <= current_time <= end_sec:
                self.highlight_text(subtitle.text)
                break
            if current_time > end_sec:
                self.current_subtitle_index += 1  
        if self.is_playing:
            QTimer.singleShot(100, self.update_subtitles)

    def highlight_text(self, text):
        escaped_text = text.replace("'", "\\'").replace('"', '\\"')
        if self.webview:
            self.webview.page().runJavaScript(f'highlightNextOccurrence("{escaped_text}")')

    def show_error(self, message):
        msg_box = QMessageBox()
        msg_box.setIcon(QMessageBox.Critical)
        msg_box.setText(message)
        msg_box.setWindowTitle("Error")
        msg_box.exec_()


class Dashboard(QWidget):
    def __init__(self, audio_player, sections_data):
        super().__init__()
        self.audio_player = audio_player
        self.sections_data = sections_data
        self.html_file = None
        self.original_content = None
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("Dashboard - Audio Player with Text Highlighting")
        self.setGeometry(100, 100, 1000, 700)

        grid_layout = QGridLayout()
        self.setLayout(grid_layout)

        # Upload HTML Button
        upload_button = QPushButton("Upload HTML File")
        upload_button.setFixedHeight(30)
        grid_layout.addWidget(upload_button, 0, 0, 1, 2)
        upload_button.clicked.connect(self.upload_html_file)

        # Section List
        self.section_list = QListWidget()
        self.section_list.addItems(self.sections_data.keys())
        self.section_list.clicked.connect(self.handle_section_change)
        self.section_list.setFixedWidth(250)

        # WebView for HTML Display
        self.webview = QWebEngineView()
        self.webview.setMinimumSize(700, 500)

        grid_layout.addWidget(QLabel("Sections"), 1, 0)
        grid_layout.addWidget(self.section_list, 2, 0, 3, 1)
        grid_layout.addWidget(QLabel("Highlighted Text"), 1, 1)
        grid_layout.addWidget(self.webview, 2, 1, 3, 1)

        # Audio Controls
        button_layout = QHBoxLayout()
        play_button = QPushButton('‚ñ∂ Play Section')
        play_button.clicked.connect(self.play_audio)
        button_layout.addWidget(play_button)

        pause_button = QPushButton('‚è∏ Pause')
        pause_button.clicked.connect(self.pause_audio)
        button_layout.addWidget(pause_button)

        stop_button = QPushButton('‚èπ Stop')
        stop_button.clicked.connect(self.stop_audio)
        button_layout.addWidget(stop_button)

        grid_layout.addWidget(QLabel("Audio Controls"), 5, 0, 1, 2)
        grid_layout.addLayout(button_layout, 6, 0, 1, 2)

        # Button to Run Scripts
        run_scripts_button = QPushButton('üîÑ Run Section & Time Processing')
        run_scripts_button.clicked.connect(self.run_scripts)
        grid_layout.addWidget(run_scripts_button, 7, 0, 1, 2)

    def upload_html_file(self):
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(self, "Select HTML File", "", "HTML Files (*.html);;All Files (*)", options=options)
        
        if file_path:
            self.html_file = file_path
            self.original_content = self.load_original_content()
            self.webview.setUrl(QUrl.fromLocalFile(self.html_file))
            self.audio_player.webview = self.webview

    def load_original_content(self):
        with open(self.html_file, 'r', encoding='utf-8') as file:
            return file.read()

    def play_audio(self):
        self.audio_player.play_audio()

    def pause_audio(self):
        self.audio_player.pause_audio()

    def stop_audio(self):
        self.audio_player.stop_audio()

    @pyqtSlot()
    def handle_section_change(self):
        section_name = self.section_list.currentItem().text()
        section = self.sections_data.get(section_name)
        if not section:
            return
        self.audio_player.webview.page().runJavaScript('resetHighlights()')
        self.audio_player.webview.page().runJavaScript(f"highlightSection('{section_name}')")

        try:
            self.audio_player.stop_audio()
            self.audio_player.section_start_time = self.convert_to_seconds(section.get('start_time', '00:00:00,000'))
            self.audio_player.section_end_time = self.convert_to_seconds(section.get('end_time', '00:00:00,000'))
        except Exception as e:
            print(f"Error processing section times: {e}")

    def run_scripts(self):
        try:
            subprocess.run(["python", "section_code.py"], capture_output=True, text=True)
            subprocess.run(["python", "start_end_time.py"], capture_output=True, text=True)
            QMessageBox.information(self, "Success", "Both scripts ran successfully!")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error running scripts:\n{e}")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    audio_player = AudioPlayer('nic/sml_ges.mp3', 'nic/sml_ges.srt')
    dashboard = Dashboard(audio_player, json.load(open('updated_sections.json', 'r', encoding='utf-8')))
    dashboard.show()
    sys.exit(app.exec_())
