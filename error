import os
import glob
import re
import argparse
import pandas as pd
from multiprocessing import Pool, cpu_count

# --- Replacement function ---
def replace_match(m):
    return abbrev_map.get(m.group(0).lower(), m.group(0))

# --- Per-file processing ---
def process_file(file):
    try:
        df = pd.read_parquet(file)

        if 'CMPNT_MATL_DESC' not in df.columns:
            print(f"⚠️ Skipped {file}: missing 'CMPNT_MATL_DESC'")
            return

        df['CMPNT_MATL_DESC'] = df['CMPNT_MATL_DESC'].str.replace(
            abbrev_pattern, replace_match, regex=True
        )

        df.to_parquet(file, index=False)
        print(f"✅ Expanded abbreviations in: {file}")

    except Exception as e:
        print(f"❌ Failed to process {file} -> {e}")

# --- Main ---
def main(input_path, abbrev_map_path):
    global abbrev_map, abbrev_pattern

    # Validate and load abbreviation map
    csv_files = glob.glob(os.path.join(abbrev_map_path, "*.csv"))
    if not csv_files:
        raise FileNotFoundError(f"❌ No abbreviation CSV found in: {abbrev_map_path}")
    
    abbrev_csv = csv_files[0]
    abbrev_df = pd.read_csv(abbrev_csv)
    print(f"📖 Loaded abbreviation map: {abbrev_csv} ({len(abbrev_df)} entries)")

    abbrev_map = {k.lower(): v for k, v in zip(abbrev_df['Abbreviation_list'], abbrev_df['Abbreviation_Expension'])}
    abbrev_pattern = re.compile(
        r'\b(' + '|'.join(re.escape(k) for k in abbrev_map.keys()) + r')\b',
        flags=re.IGNORECASE
    )

    # Load files
    files = glob.glob(os.path.join(input_path, '*.parquet'))
    if not files:
        print(f"❌ No parquet files found in: {input_path}")
        return

    print(f"📁 Found {len(files)} files to process in {input_path}")

    # Process files
    with Pool(processes=cpu_count()) as pool:
        pool.map(process_file, files)

    print("✅ Abbreviation expansion completed.")

# --- Entry point ---
if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--input_path', required=True)
    parser.add_argument('--abbrev_map', required=True)
    parser.add_argument('--output_path')  # not used for now
    args = parser.parse_args()

    main(args.input_path, args.abbrev_map)
