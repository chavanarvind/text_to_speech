Objective
To integrate a curated list of ERP_PART_ID and TRU_SPEC_ID mappings (provided in NLP_LIST_ERP.csv) into the automated matching flow with two layers of logic:

Forced Mapping – Enforces predefined pairs.

Normal Mapping – Leverages the same file to detect additional potential matches using material ID and description alignment.

🔹 1. Forced Mapping Logic (High-Priority Match)
Purpose: Ensures that all ERP–TRU pairs explicitly listed in the reference file are matched unconditionally if both records exist.

🧩 Key Features:
Ignores description similarity or scoring.

Direct match using:

ERP_PART_ID → ERP dataset

TRU_SPEC_ID → TRU dataset

Confirms ERP_MAT_NUM == TRU_MAT_NUM for alignment.

Applied before any other logic (first step in match_by_reference_table).

✅ Output:
Matching Reason: "NLP_LIST_ERP suggested X-match (forced pair)"

Confidence: "high"

Score: 1

Result: Stored in forced_match_debug.csv for audit purposes.

🔹 2. Normal Mapping Logic (Conditional Match)
Purpose: Captures additional ERP–TRU matches from the same reference file if forced pair criteria are not met.

🧩 Matching Conditions:
By ID:

ERP_PART_ID and TRU_SPEC_ID are joined with ERP and TRU datasets respectively.

Merged on SRC_SYS_CD, PLNT_CD, ERP_MAT_NUM, TRU_SPEC_ID.

By Description (if available):

Matches are attempted using text_for_matching_erp and text_for_matching_tru.

✅ Output:
Matching Reason: "NLP_LIST_ERP suggested X-match"

Confidence: "high"

Score: 1

🔄 Matching Flow Summary
Step	Description
1	Load NLP_LIST_ERP.csv and clean ID fields
2	Perform forced matching using ERP_PART_ID and TRU_SPEC_ID
3	If valid, match via ERP_MAT_NUM and assign as high-confidence
4	Next, apply normal matching using ID and/or text fields
5	Combine results, remove duplicates
6	Pass remaining unmatched data to next rounds

📁 Debug & Audit Artifacts
✅ forced_match_debug.csv: All ERP–TRU pairs matched via forced logic.

✅ matches_NLP_list_ERP.csv: All matches (forced + normal) derived from this reference table.

