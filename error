def classify_as_off_spec(df: pd.DataFrame) -> List:
    '''
    df should have as first column the id and as second column the description

    Data can be either ERP or TRU as the OFF_SPEC_LIST includes both
    '''

    n = len(df)
    col_id = df.columns[0]
    col_desc = df.columns[1]

    print(f"\n[DEBUG] Checking row â†’ ID: {df[col_id].iloc[0]}, DESC: {df[col_desc].iloc[0]}")

    df_reference = df.merge(OFF_SPEC_LIST[['id']].drop_duplicates(),
                            left_on=col_id,
                            right_on='id',
                            how='left')

    if df_reference['id'].notna().any():
        print(f"[DEBUG] Matched by ID: {df_reference['id'].dropna().tolist()}")

    df_reference = df_reference.merge(OFF_SPEC_LIST[['description']].drop_duplicates(),
                                      left_on=col_desc,
                                      right_on='description',
                                      how='left')

    if df_reference['description'].notna().any():
        print(f"[DEBUG] Matched by Description: {df_reference['description'].dropna().tolist()}")

    based_on_list = df_reference[['id', 'description']].notna().any(axis=1)

    keyword_match = (df[col_desc]
                     .str
                     .lower()
                     .str
                     .contains('|'.join(IRRELEVANT_MATERIALS), case=False)
                     )
    keyword_match = (keyword_match | df[col_desc].str.lower().isin(['agua', 'aqua']))

    if keyword_match.any():
        print(f"[DEBUG] Matched by Keyword: {df.loc[keyword_match, col_desc].tolist()}")

    final_result = (based_on_list | keyword_match)

    print(f"[DEBUG] Final result: {final_result.tolist()}\n")

    return final_result
