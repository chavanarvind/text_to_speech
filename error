import os
import pandas as pd

# --- Smart category mapping function ---
def map_cmpnt_type_category(val):
    if pd.isna(val):
        return 'OTHER'

    val_clean = str(val).strip()
    val_lower = val_clean.lower()
    val_upper = val_clean.upper()

    # ERP material type mapping
    erp_type_map = {
        'FERT': 'FINISHED_PRODUCT',
        'HALB': 'SEMI_FINISHED',
        'ROH': 'RAW_MATERIAL',
        'VERP': 'PACKAGING_MATERIAL',
        'TRAD': 'TRADED_GOOD',
        'ERSA': 'SUBCONTRACT_COMPONENT',
        'API': 'API',
        'TPF': 'TRADE_PRODUCT',
        'PACK': 'PACKAGING',
        'ZHBG': 'INTERMEDIATE',
        'EPC': 'EXCIPIENT',
        'EPF': 'FINISHED_PRODUCT',
        'HAWA': 'TRADING_GOOD',
        'ZEXI': 'EXCIPIENT',
        'ZROH': 'RAW_MATERIAL',
        'SAPR': 'PACKAGING',
        'IM': 'INTERMEDIATE',
        'UNBW': 'NON_VALUATED',
        'IG': 'INTERMEDIATE_GOOD'
    }

    if val_upper in erp_type_map:
        return erp_type_map[val_upper]

    if any(x in val_lower for x in ['packaging', 'bottle', 'jar', 'cap', 'carton', 'tube', 'pouch', 'closure']):
        return 'PACKAGING'
    if any(x in val_lower for x in ['chemical', 'solvent', 'alcohol', 'acid', 'buffer', 'salt', 'preservative']):
        return 'CHEMICAL'
    if any(x in val_lower for x in ['actives', 'naturals', 'flavor', 'fragrance', 'api']):
        return 'ACTIVES_NATURALS'
    if any(x in val_lower for x in ['film', 'foil', 'label', 'sleeve']):
        return 'FILMS_LABELS'
    if any(x in val_lower for x in ['soap', 'conditioner', 'emulsifier', 'thickener', 'talc', 'sunscreen']):
        return 'COSMETIC_BASE'
    if any(x in val_lower for x in ['glass', 'pump', 'puff']):
        return 'CONTAINERS'

    if len(val_clean) <= 5 and val_clean.isalnum():
        return 'ERP_CODE'

    return 'OTHER'

# --- Single file path ---
input_file = './data/sample_cleaned.parquet'

# --- Process single file ---
try:
    print(f"⏳ Mapping material type category in: {os.path.basename(input_file)}")
    df = pd.read_parquet(input_file)

    df['CMPNT_MATL_TYPE_CATEGORY'] = df['CMPNT_MATL_TYPE_CD'].apply(map_cmpnt_type_category)

    df.to_parquet(input_file, index=False)
    print(f"✅ Updated and overwritten: {input_file}")
except Exception as e:
    print(f"❌ Failed to process {input_file} -> {e}")
