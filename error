# üü£ STEP 1: FORCE PAIR LOGIC FIRST for NLP_LIST_ERP
if "nlp_list_erp" in round_name.lower():
    print("-" * 60)
    print(f"üîÑ FORCE PAIR LOGIC FOR ALL REFERENCE PAIRS in {round_name}")

    # Strip spaces from reference keys
    reference_table[ERP_PART_ID] = reference_table[ERP_PART_ID].astype(str).str.strip()
    reference_table[TRU_SPEC_ID] = reference_table[TRU_SPEC_ID].astype(str).str.strip()
    erp_full[ERP_PART_ID] = erp_full[ERP_PART_ID].astype(str).str.strip()
    tru_full[TRU_SPEC_ID] = tru_full[TRU_SPEC_ID].astype(str).str.strip()

    forced_pairs = reference_table[[ERP_PART_ID, TRU_SPEC_ID]].drop_duplicates()
    print(f"‚úÖ Total forced pairs in reference table: {len(forced_pairs)}")

    # DEBUG: Check if target pair is in reference table
    target_pair = forced_pairs[
        (forced_pairs[ERP_PART_ID] == '6115990') & 
        (forced_pairs[TRU_SPEC_ID] == 'PC-046458')
    ]
    print(f"üîç Is target pair in reference table? {not target_pair.empty}")

    # üöÄ Process all pairs directly from erp_full and tru_full
    erp_full[ERP_PART_ID] = erp_full[ERP_PART_ID].astype(str).str.strip()
    tru_full[TRU_SPEC_ID] = tru_full[TRU_SPEC_ID].astype(str).str.strip()

    erp_forced = erp_full[ERP_MATCH_COLS].merge(
        forced_pairs, on=ERP_PART_ID, how='inner'
    )
    print(f"‚úÖ ERP records found for forced pairs: {len(erp_forced)}")
    if not erp_forced.empty:
        print(erp_forced[erp_forced[ERP_PART_ID] == '6115990'])

    forced_matches = erp_forced.merge(
        tru_full[TRU_MATCH_COLS],
        left_on=['SRC_SYS_CD', 'PLNT_CD', TRU_SPEC_ID],
        right_on=['SRC_SYS_CD', 'PLNT_CD', TRU_SPEC_ID],
        how='inner'
    )
    print(f"‚úÖ Forced matches found after joining TRU: {len(forced_matches)}")

    # DEBUG: Check if target pair survived
    target_forced_match = forced_matches[
        (forced_matches[ERP_PART_ID] == '6115990') & 
        (forced_matches[TRU_SPEC_ID] == 'PC-046458')
    ]
    print(f"üîç Is target pair present in forced matches? {not target_forced_match.empty}")

    # DEBUG: If missing, log why
    if target_forced_match.empty:
        missing_erp = forced_pairs[~forced_pairs[ERP_PART_ID].isin(erp_forced[ERP_PART_ID])]
        if not missing_erp.empty:
            print(f"‚ö†Ô∏è ERP_PART_IDs missing in erp_full:\n{missing_erp}")

        missing_tru = forced_pairs[~forced_pairs[TRU_SPEC_ID].isin(tru_full[TRU_SPEC_ID])]
        if not missing_tru.empty:
            print(f"‚ö†Ô∏è TRU_SPEC_IDs missing in tru_full:\n{missing_tru}")

    # ‚úÖ Process forced matches
    if not forced_matches.empty:
        forced_matches[SCORE_COL] = 1
        forced_matches[UNIFIED_MC_COL] = forced_matches[f'{ERP_MAT_NUM}_original'].copy()
        forced_matches['is_matched'] = True
        forced_matches['Matching Reason'] = round_name + ' (forced pair)'
        forced_matches['confidence'] = 'high'
        forced_matches = add_matches_bundles(forced_matches, bundles, tru_full)

        # Save forced matches for inspection
        user_logs_path = os.path.join(os.getcwd(), "user_logs")
        os.makedirs(user_logs_path, exist_ok=True)  # create directory if it doesn't exist
        forced_matches.to_csv(
            os.path.join(user_logs_path, "forced_match_debug.csv"), 
            index=False
        )
        print(f"üìÑ Saved all forced matches to user_logs/forced_match_debug.csv")

        matches = pd.concat([matches, forced_matches], ignore_index=True)
    else:
        print("üö´ No forced matches found in ERP/TRU full datasets")
