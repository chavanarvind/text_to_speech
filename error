import os
import re
import glob
import pandas as pd
from multiprocessing import Pool, cpu_count

# --- Load abbreviation map ---
abbrev_csv_path = './data/abbreviation_expension_updated.csv'
abbrev_df = pd.read_csv(abbrev_csv_path)
abbrev_map = {k.lower(): v for k, v in zip(abbrev_df['Abbreviation_list'], abbrev_df['Abbreviation_Expension'])}
abbrev_pattern = re.compile(r'\b(' + '|'.join(re.escape(k) for k in abbrev_map.keys()) + r')\b', flags=re.IGNORECASE)

def expand_abbreviations(text):
    return abbrev_pattern.sub(lambda m: abbrev_map.get(m.group(0).lower(), m.group(0)), text)

# --- Worker function ---
def process_file(file):
    try:
        df = pd.read_parquet(file)

        # Filter out rows with null Final Category
        df = df[df['Final Category'].notna()]
        if df.empty:
            print(f"⚠️ Skipped (no valid rows): {os.path.basename(file)}")
            return

        # Apply abbreviation expansion only
        df['MATL_SHRT_DESC'] = df['MATL_SHRT_DESC'].fillna('').apply(expand_abbreviations)
        df['CMPNT_MATL_DESC'] = df['CMPNT_MATL_DESC'].fillna('').apply(expand_abbreviations)

        # Overwrite file
        df.to_parquet(file, index=False)
        print(f"✅ Done: {os.path.basename(file)}")

    except Exception as e:
        print(f"❌ Failed: {os.path.basename(file)} -> {e}")

# --- Execute in parallel ---
if __name__ == '__main__':
    input_path = './data/target_map_cleaned'
    files = glob.glob(os.path.join(input_path, '*.parquet'))

    with Pool(processes=cpu_count()) as pool:
        pool.map(process_file, files)
