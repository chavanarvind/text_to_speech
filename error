def process_file(file_path, mapping_df, mapped_dir, needs_model_dir, key_output_dir):
    try:
        print(f"\n[INFO] Processing: {os.path.basename(file_path)}")

        # Load necessary columns
        df = pd.read_parquet(file_path, columns=[
            "CMPNT_MATL_NUM", "CMPNT_MATL_DESC", "CMPNT_MATL_TYPE_CD",
            "CMPNT_CAT_CD_DESC", "CMPNT_UOM_CD"
        ])
        df = df[df['CMPNT_MATL_DESC'].notna()].drop_duplicates()

        # Normalize text for matching
        df[JOIN_COL_1] = df[JOIN_COL_1].fillna("").astype(str).str.strip().str.upper()
        df[JOIN_COL_2] = df[JOIN_COL_2].fillna("").astype(str).str.strip().str.upper()
        mapping_df[DIRECT_MAP_KEY_1] = mapping_df[DIRECT_MAP_KEY_1].fillna("").astype(str).str.strip().str.upper()
        mapping_df[DIRECT_MAP_KEY_2] = mapping_df[DIRECT_MAP_KEY_2].fillna("").astype(str).str.strip().str.upper()

        # Ensure expected mapping columns exist
        for col in ['Final Category', 'Final Subcategory']:
            if col not in mapping_df.columns:
                print(f"[WARNING] '{col}' column not found in mapping_df. Filling with None.")
                mapping_df[col] = None

        # Debug: Uniqueness checks
        print(f"[INFO] Unique CMPNT_CAT_CD_DESC in input: {df[JOIN_COL_1].nunique()}")
        print(f"[INFO] Unique CMPNT_MATL_TYPE_CD in input: {df[JOIN_COL_2].nunique()}")

        category_overlap = set(df[JOIN_COL_1]) & set(mapping_df[DIRECT_MAP_KEY_1])
        type_overlap = set(df[JOIN_COL_2]) & set(mapping_df[DIRECT_MAP_KEY_2])
        print(f"[CHECK] Matching unique categories: {len(category_overlap)}")
        print(f"[CHECK] Matching unique material types: {len(type_overlap)}")

        # Stage 1: Direct mapping by category
        stage1_df = df.merge(mapping_df, how="inner", left_on=[JOIN_COL_1], right_on=[DIRECT_MAP_KEY_1])
        stage1_df['matching_reason'] = 'direct_mapping_category'
        stage1_df['confidence_score'] = 1.0
        print(f"[STAGE 1] Direct category mapping: {len(stage1_df)} rows matched")

        # Stage 2: Fallback mapping by type code
        df_not_mapped = df[~df['CMPNT_MATL_NUM'].isin(stage1_df['CMPNT_MATL_NUM'])]
        stage2_df = df_not_mapped.merge(mapping_df, how="inner", left_on=[JOIN_COL_2], right_on=[DIRECT_MAP_KEY_2])
        stage2_df['matching_reason'] = 'direct_mapping_type_only'
        stage2_df['confidence_score'] = 1.0
        print(f"[STAGE 2] Fallback type-code mapping: {len(stage2_df)} rows matched")

        # Combine mapped results
        mapped_df = pd.concat([stage1_df, stage2_df], ignore_index=True)
        print(f"[INFO] Total mapped rows (Stage 1 + 2): {len(mapped_df)}")

        # Identify unmapped input component material numbers
        all_input_ids = set(df['CMPNT_MATL_NUM'])
        mapped_ids = set(mapped_df['CMPNT_MATL_NUM'])
        unmapped_ids = all_input_ids - mapped_ids

        unmapped_df = pd.DataFrame()
        if unmapped_ids:
            unmapped_df = df[df['CMPNT_MATL_NUM'].isin(unmapped_ids)].copy()
            print(f"[WARNING] {len(unmapped_df)} rows could not be mapped at all.")

            # Add fallback columns
            unmapped_df['Final Category'] = None
            unmapped_df['Final Subcategory'] = None
            unmapped_df['needs_model'] = True
            unmapped_df['matching_reason'] = 'unmapped_fallback'
            unmapped_df['confidence_score'] = 0.0

            # Ensure schema consistency
            for col in mapped_df.columns:
                if col not in unmapped_df.columns:
                    unmapped_df[col] = None

        # Determine needs_model flag based on completeness
        if 'Final Category' in mapped_df.columns and 'Final Subcategory' in mapped_df.columns:
            mapped_df['Final Category Filled'] = mapped_df['Final Category'].notna() & mapped_df['Final Category'].str.strip().ne("")
            mapped_df['Final Subcategory Filled'] = mapped_df['Final Subcategory'].notna() & mapped_df['Final Subcategory'].str.strip().ne("")
            mapped_df['needs_model'] = ~mapped_df['Final Category Filled'] | ~mapped_df['Final Subcategory Filled']
        else:
            print("[ERROR] 'Final Category' or 'Final Subcategory' not found in mapped_df. Marking all as needs_model.")
            mapped_df['needs_model'] = True

        # Split mapped rows into those needing a model vs fully mapped
        mapped_only_df = mapped_df[~mapped_df['needs_model']].copy()
        needs_model_df = mapped_df[mapped_df['needs_model']].copy()

        # Append totally unmapped rows
        if not unmapped_df.empty:
            needs_model_df = pd.concat([needs_model_df, unmapped_df[mapped_df.columns]], ignore_index=True)

        # Save samples for debugging
        os.makedirs("outputs/samples_by_source", exist_ok=True)
        mapped_only_df.to_csv(f"outputs/samples_by_source/fully_mapped_rows_{os.path.basename(file_path)}.csv", index=False)
        needs_model_df.head(100).to_csv("outputs/samples_by_source/needs_model_df.csv", index=False)

        # Save to final outputs
        os.makedirs(mapped_dir, exist_ok=True)
        os.makedirs(needs_model_dir, exist_ok=True)
        mapped_only_df.to_parquet(os.path.join(mapped_dir, os.path.basename(file_path)), index=False)
        needs_model_df.to_parquet(os.path.join(needs_model_dir, os.path.basename(file_path)), index=False)

        # Save key file if required columns exist
        full_columns = pd.read_parquet(file_path).columns
        if all(col in full_columns for col in KEY_COLS):
            full_df = pd.read_parquet(file_path, columns=KEY_COLS).drop_duplicates()
            os.makedirs(key_output_dir, exist_ok=True)
            full_df.to_parquet(os.path.join(key_output_dir, os.path.basename(file_path)), index=False)
            print(f"[INFO] Saved key reference: {os.path.basename(file_path)}")
        else:
            print(f"[INFO] Skipping key file for {os.path.basename(file_path)}, missing required columns.")

    except Exception as e:
        print(f"[ERROR] Failed to process {file_path}: {e}")
