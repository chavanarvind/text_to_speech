def handle_off_spec_rejections(matched_df: pd.DataFrame, rejection_df: pd.DataFrame, debug_cmpnt_num=None, debug_child_nm=None) -> pd.DataFrame:

    print("Running Off Spec Rejection Check...")

    # Create a key for easy lookup
    matched_df['MATCH_KEY'] = matched_df['CMPNT_MATL_NUM'].astype(str) + "_" + matched_df['CHILD_NM'].astype(str)
    rejection_df['REJECTION_KEY'] = rejection_df['CMPNT_MATL_NUM'].astype(str) + "_" + rejection_df['CHILD_NM'].astype(str)

    # Build rejection set
    rejection_set = set(rejection_df['REJECTION_KEY'].unique())

    # Apply logic to update rows
    def update_row(row):
        if row['MATCHING_REASON'] == "Off Spec Match" and row['MATCH_KEY'] in rejection_set:
            print(f"‚ùó Record Rejected: {row['CMPNT_MATL_NUM']} / {row['CHILD_NM']} ‚Üí Off Spec Non Match")
            row['IS_MATCHED'] = False
            row['MATCHING_REASON'] = "Off Spec Non Match (Rejected)"
        else:
            if (
                debug_cmpnt_num is not None and debug_child_nm is not None
                and row['CMPNT_MATL_NUM'] == debug_cmpnt_num
                and row['CHILD_NM'] == debug_child_nm
            ):
                print(f"üîç Debug Record Trace: {row['CMPNT_MATL_NUM']} / {row['CHILD_NM']} ‚Üí "
                      f"Matched={row['IS_MATCHED']}, Reason={row['MATCHING_REASON']}")
        return row

    matched_df = matched_df.apply(update_row, axis=1)

    # Drop helper column
    matched_df.drop(columns=['MATCH_KEY'], inplace=True)

    print("‚úÖ Off Spec Rejection Check Completed.")
    return matched_df
