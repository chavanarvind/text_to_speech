import os
from typing import List

import pandas as pd

from cross_hound.config import IRRELEVANT_MATERIALS

xhound_folder = os.path.dirname(os.path.realpath(__file__))
src_folder = os.path.abspath(os.path.join(xhound_folder, os.pardir))

OFF_SPEC_LIST = pd.read_csv(f'{src_folder}/reference_tables/off_spec_items.csv', dtype=str)


def classify_as_off_spec(df: pd.DataFrame) -> List[bool]:
    '''
    Classify rows as off-spec based on:
    - Exact ID match
    - Exact normalized description match
    - Keyword match

    Expects:
    df.columns[0] = ID
    df.columns[1] = Description
    '''

    col_id = df.columns[0]
    col_desc = df.columns[1]

    print(f"[DEBUG] Processing {len(df)} rows")
    print(f"[DEBUG] Sample row: ID={df[col_id].iloc[0]}, DESC={df[col_desc].iloc[0]}")

    # Normalize input
    df_id = df[col_id].astype(str).str.strip()
    df_desc = df[col_desc].astype(str).str.strip().str.lower()

    # Normalize reference list
    offspec_ids = OFF_SPEC_LIST['id'].astype(str).str.strip().unique()
    offspec_descs = OFF_SPEC_LIST['description'].astype(str).str.strip().str.lower().unique()

    # Match by ID
    match_by_id = df_id.isin(offspec_ids)
    if match_by_id.any():
        #print(f"[DEBUG] Matched by ID: {df.loc[match_by_id, col_id].tolist()}")
        print("ok")

    # Match by description
    match_by_desc = df_desc.isin(offspec_descs)
    if match_by_desc.any():
        #print(f"[DEBUG] Matched by Description: {df.loc[match_by_desc, col_desc].tolist()}")
        print("ok")
    # Keyword match
    keyword_pattern = '|'.join(IRRELEVANT_MATERIALS)
    match_by_keyword = (
        df_desc.str.contains(keyword_pattern, case=False, na=False) |
        df_desc.isin(['agua', 'aqua'])
    )
    if match_by_keyword.any():
        #print(f"[DEBUG] Matched by Keyword: {df.loc[match_by_keyword, col_desc].tolist()}")
        print("ok")
    final_result = (match_by_id | match_by_desc | match_by_keyword)

    #print(f"[DEBUG] Final result: {final_result.tolist()}")
    return final_result.tolist()


