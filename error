from azureml.core import Workspace, Experiment, Environment, Dataset, Datastore
from azureml.pipeline.core import Pipeline, PipelineData
from azureml.pipeline.steps import PythonScriptStep
from azureml.data import OutputFileDatasetConfig, DataPath
from azureml.core.compute import ComputeTarget
import os

# === Workspace and Compute Target ===
ws = Workspace.from_config()
compute_target = ComputeTarget(workspace=ws, name="your-compute-cluster")

# === Input Definitions ===
# Define local mapping folder (uploaded manually or pre-registered)
datastore = Datastore.get(ws, datastore_name="workspaceblobstore")
mapping_csv_path = DataPath(datastore, "mapping_folder/")
input_data = Dataset.File.from_files(path=(datastore, "raw_input_data/"))

# === Output Definitions ===
step1a_output = OutputFileDatasetConfig(name="mapped_data_output")
step2_output = OutputFileDatasetConfig(name="preprocessed_data_output")

# === Environment ===
env = Environment.get(ws, name="AzureML-sklearn-1.0-ubuntu20.04-py38-cpu")  # Or define custom one

# === Step 1a: Mapping Logic ===
step1a_merge = PythonScriptStep(
    name="Step1a_MergeAndMap",
    script_name="step1a_merge_singlefile.py",
    arguments=[
        "--input_path", input_data.as_mount(),
        "--mapping_csv", mapping_csv_path,
        "--key_output", "key_reference_output.parquet",
        "--final_output", step1a_output
    ],
    inputs=[input_data, mapping_csv_path],
    outputs=[step1a_output],
    compute_target=compute_target,
    source_directory="scripts",
    allow_reuse=True,
    environment=env
)

# === Step 2: Preprocessing (Abbreviation + Cleaning + Features) ===
step2_preprocess = PythonScriptStep(
    name="Step2_PreProcess",
    script_name="step2_pre_process.py",
    arguments=[
        "--input_path", step1a_output,
        "--abbrev_map", mapping_csv_path,
        "--output_path", step2_output
    ],
    inputs=[step1a_output, mapping_csv_path],
    outputs=[step2_output],
    compute_target=compute_target,
    source_directory="scripts",
    allow_reuse=True,
    environment=env
)

# === Pipeline Definition ===
pipeline = Pipeline(workspace=ws, steps=[step1a_merge, step2_preprocess])
pipeline.validate()

# === Submit Run ===
experiment = Experiment(ws, name="bom_processing_pipeline")
pipeline_run = experiment.submit(pipeline)
pipeline_run.wait_for_completion(show_output=True)
