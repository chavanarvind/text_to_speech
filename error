import os
import glob
import re
import argparse
import pandas as pd
from multiprocessing import Pool, cpu_count

# --- Replacement function ---
def replace_match(m):
    return abbrev_map.get(m.group(0).lower(), m.group(0))

# --- Per-file processing ---
def process_file(file):
    try:
        df = pd.read_parquet(file)

        df['CMPNT_MATL_DESC'] = df['CMPNT_MATL_DESC'].str.replace(
            abbrev_pattern, replace_match, regex=True
        )

        df.to_parquet(file, index=False)
        print(f" Expanded abbreviations in: {os.path.basename(file)}")
    except Exception as e:
        print(f" Failed: {os.path.basename(file)} -> {e}")

# --- Main ---
def main(input_path):
    global abbrev_map, abbrev_pattern

    # Load abbreviation map from CSV
    abbrev_df = pd.read_csv('./data/abbreviation_expension_updated.csv')
    abbrev_map = {k.lower(): v for k, v in zip(abbrev_df['Abbreviation_list'], abbrev_df['Abbreviation_Expension'])}

    # Compile regex pattern
    abbrev_pattern = re.compile(
        r'\b(' + '|'.join(re.escape(k) for k in abbrev_map.keys()) + r')\b',
        flags=re.IGNORECASE
    )

    # Get all files to process
    files = glob.glob(os.path.join(input_path, '*.parquet'))
    with Pool(processes=cpu_count()) as pool:
        pool.map(process_file, files)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--input_path', required=True)
    parser.add_argument('--output_path')  # Not needed, modifying in place
    args = parser.parse_args()

    main(args.input_path)


error---    handle = open(
FileNotFoundError: [Errno 2] No such file or directory: './data/abbreviation_expension_updated.csv'
