import pandas as pd
import re

# --- Load abbreviation map from CSV ---
abbrev_df = pd.read_csv("your_file.csv")  # üîÅ Replace with your actual file path
abbrev_map = {
    k.lower(): v for k, v in zip(abbrev_df['Abbreviation_list'], abbrev_df['Abbreviation_Expension'])
}
abbrev_pattern = re.compile(r'\b(' + '|'.join(re.escape(k) for k in abbrev_map.keys()) + r')\b', flags=re.IGNORECASE)

# --- Replacement function ---
def replace_match(m):
    return abbrev_map.get(m.group(0).lower(), m.group(0))

# --- Sample test data (you can replace this with your own column) ---
df = pd.DataFrame({
    "CMPNT_MATL_DESC": [
        "Vitamin C 100 MG + Zinc",
        "Syrup 5 ml",
        "Gel 100 ml",
        "10 Ct Pack",
        "SPF 30 Lotion!!"
    ]
})

# --- Step 1: Apply abbreviation expansion ---
df["abbrev_expanded"] = df["CMPNT_MATL_DESC"].str.replace(abbrev_pattern, replace_match, regex=True)

# --- Step 2: Regex cleaning function (copied from your cleaning logic) ---
patterns = {
    'non_alphanumeric': re.compile(r'[^A-Za-z0-9&% ]+'),
    'percent_space': re.compile(r"\s*%\s*"),
    'canada_variants': re.compile(r'(canada|can|(ca\d+)$|ca)'),
    'remove_canada': re.compile(r'canada\s*(\d{2,})|(canada\d+)|canada|can\s*(\d{2,})|(can\d+)|can|(ca\d+)|ca\s(\d{2,})|ca$|(ca\s)'),
    'units': re.compile(r"(\D)(\d+)(\s*)(ml|l|gr|gm|g|ct)"),
    'spf_space': re.compile(r"(\s)(spf)\s*([\d+])"),
    'units_no_space': re.compile(r'([\d+])\s*(?:ml|l|gr|gm|g|ct)(?: |$)'),
    'spf_number': re.compile(r"(\D)(spf\d+)")
}

def clean_series(series):
    return (series.str.lower()
        .str.replace(patterns['non_alphanumeric'], '', regex=True)
        .str.replace(patterns['percent_space'], '% ', regex=True)
        .str.replace(patterns['canada_variants'], r' \1', regex=True)
        .str.replace(patterns['remove_canada'], '', regex=True)
        .str.replace(patterns['units'], r'\1 \2\3\4 ', regex=True)
        .str.replace(patterns['spf_space'], r'\1\2\3', regex=True)
        .str.replace(patterns['units_no_space'], lambda z: z.group().replace(" ", ""), regex=True)
        .str.replace(patterns['spf_number'], r'\1 \2 ', regex=True)
    )

# --- Step 3: Apply regex-based cleaning on expanded values ---
df["regex_cleaned"] = clean_series(df["abbrev_expanded"])

# --- Final Output: Compare all versions ---
print(df[["CMPNT_MATL_DESC", "abbrev_expanded", "regex_cleaned"]])
