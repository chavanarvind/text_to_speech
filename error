#extarct and merge code
import argparse
import os
import glob
import uuid
import pandas as pd
from azureml.core import Run, Dataset

# === Define constants ===
DIRECT_MAP_KEY_1 = "Direct Mapping"
DIRECT_MAP_KEY_2 = "Direct Mapping"
JOIN_COL_1 = "CMPNT_CAT_CD_DESC"
JOIN_COL_2 = "CMPNT_MATL_TYPE_CD"
KEY_COLS = ["SRC_SYS_CD", "MATL_NUM", "PLNT_CD", "CMPNT_MATL_NUM"]

def ensure_ai_columns(df):
    expected_cols = [
        'AI_FINAL_CATEGORY', 'AI_FINAL_CATEGORY_CONFIDENCE', 'AI_MATCHING_REASON_FINAL_CATEGORY',
        'AI_FINAL_SUBCATEGORY', 'AI_FINAL_SUBCATEGORY_CONFIDENCE', 'AI_MATCHING_REASON_FINAL_SUBCATEG'
    ]
    for col in expected_cols:
        if col not in df.columns:
            df[col] = None
    return df

def apply_existing_ai_overrides(df):
    df['skip_category_mapping'] = (
        df['AI_FINAL_CATEGORY'].notna() & df['AI_FINAL_CATEGORY'].astype(str).str.strip().ne('') &
        df['AI_FINAL_CATEGORY_CONFIDENCE'].notna() & df['AI_MATCHING_REASON_FINAL_CATEGORY'].notna()
    )
    df['skip_subcategory_mapping'] = (
        df['AI_FINAL_SUBCATEGORY'].notna() & df['AI_FINAL_SUBCATEGORY'].astype(str).str.strip().ne('') &
        df['AI_FINAL_SUBCATEGORY_CONFIDENCE'].notna() & df['AI_MATCHING_REASON_FINAL_SUBCATEG'].notna()
    )
    df.loc[df['skip_category_mapping'], 'Mapped_File_Category'] = df['AI_FINAL_CATEGORY']
    df.loc[df['skip_subcategory_mapping'], 'Mapped_File_Subcategory'] = df['AI_FINAL_SUBCATEGORY']
    return df

def clean_mapping_df(mapping_df, key_col, value_col):
    mapping_df.columns = mapping_df.columns.str.strip()
    mapping_df[key_col] = mapping_df[key_col].astype(str).str.upper().str.strip()
    mapping_df[value_col] = mapping_df[value_col].astype(str).str.strip()
    df_map = mapping_df[[key_col, value_col]].drop_duplicates()
    return df_map[df_map[value_col].notna() & df_map[value_col].ne("")]

def map_values(df, map_df1, map_df2, join_col1, join_col2, key1, key2, value_col, output_col):
    df[join_col1] = df[join_col1].astype(str).str.upper().str.strip()
    df[join_col2] = df[join_col2].astype(str).str.upper().str.strip()
    map_dict1 = dict(zip(map_df1[key1], map_df1[value_col]))
    map_dict2 = dict(zip(map_df2[key2], map_df2[value_col]))
    df[output_col] = df[join_col1].map(map_dict1)
    missing = df[output_col].isna() | df[output_col].astype(str).str.strip().eq("")
    df.loc[missing, output_col] = df.loc[missing, join_col2].map(map_dict2)
    df[output_col] = df[output_col].replace(["nan", "NaN"], pd.NA)
    return df

def add_flags(df):
    df['Mapped_File_Category Filled'] = df['Mapped_File_Category'].notna() & df['Mapped_File_Category'].astype(str).str.strip().ne("")
    df['Mapped_File_Subcategory Filled'] = df['Mapped_File_Subcategory'].notna() & df['Mapped_File_Subcategory'].astype(str).str.strip().ne("")
    df['category_matching_reason'] = df.apply(
        lambda row: row['AI_MATCHING_REASON_FINAL_CATEGORY'] if pd.notna(row['AI_MATCHING_REASON_FINAL_CATEGORY']) else (
            'direct_mapping' if row['Mapped_File_Category Filled'] else 'unmapped'
        ), axis=1
    )
    df['Final Category Confidence Score'] = df.apply(
        lambda row: row['AI_FINAL_CATEGORY_CONFIDENCE'] if pd.notna(row['AI_FINAL_CATEGORY_CONFIDENCE']) else (
            1.0 if row['Mapped_File_Category Filled'] else None
        ), axis=1
    )
    df['subcategory_matching_reason'] = df.apply(
        lambda row: row['AI_MATCHING_REASON_FINAL_SUBCATEG'] if pd.notna(row['AI_MATCHING_REASON_FINAL_SUBCATEG']) else (
            'direct_mapping' if row['Mapped_File_Subcategory Filled'] else 'unmapped'
        ), axis=1
    )
    df['Final Subcategory Confidence Score'] = df.apply(
        lambda row: row['AI_FINAL_SUBCATEGORY_CONFIDENCE'] if pd.notna(row['AI_FINAL_SUBCATEGORY_CONFIDENCE']) else (
            1.0 if row['Mapped_File_Subcategory Filled'] else None
        ), axis=1
    )
    df['needs_model'] = ~(df['Mapped_File_Category Filled'] & df['Mapped_File_Subcategory Filled'])
    df['needs_category_model'] = ~df['Mapped_File_Category Filled']
    df['needs_subcategory_model'] = ~df['Mapped_File_Subcategory Filled']
    return df

def register_key_output(df, input_path, output_path, ws):
    parquet_files = glob.glob(os.path.join(input_path, "*.parquet"))
    if not parquet_files:
        print(f"[INFO] No parquet file found for key extraction in {input_path}")
        return
    key_file = parquet_files[0]
    input_cols = pd.read_parquet(key_file).columns
    missing = [col for col in KEY_COLS if col not in input_cols]
    if not missing:
        key_df = pd.read_parquet(key_file, columns=KEY_COLS).drop_duplicates()
        key_file_path = os.path.join(output_path, "key_reference_output.parquet")
        key_df.to_parquet(key_file_path, index=False)
        datastore = ws.get_default_datastore()
        datastore.upload_files([key_file_path], "mapped_data/key_reference/", overwrite=True)
        dataset = Dataset.Tabular.from_parquet_files([(datastore, "mapped_data/key_reference/key_reference_output.parquet")])
        dataset.register(ws, name="bom_key_reference_dataset", description="Key columns to remap BOM", create_new_version=True)
        print("✅ Registered key reference dataset")
    else:
        print(f"[INFO] Skipped key output — missing columns: {missing}")

def register_final_output_dir(output_dir, ws):
    datastore = ws.get_default_datastore()
    print(f"[INFO] Registering final mapped output from: {output_dir}")
    dataset = Dataset.Tabular.from_parquet_files([(datastore, os.path.join(output_dir, "*.parquet"))])
    dataset.register(ws, name="bom_final_mapped_dataset", description="Final mapped output from step1a", create_new_version=True)
    print("✅ Registered: bom_final_mapped_dataset")

def finalize_output(df, output_path):
    df['AI_FINAL_CATEGORY'] = df['Mapped_File_Category']
    df['AI_FINAL_CATEGORY_CONFIDENCE'] = df['Final Category Confidence Score']
    df['AI_MATCHING_REASON_FINAL_CATEGORY'] = df['category_matching_reason']

    df['AI_FINAL_SUBCATEGORY'] = df['Mapped_File_Subcategory']
    df['AI_FINAL_SUBCATEGORY_CONFIDENCE'] = df['Final Subcategory Confidence Score']
    df['AI_MATCHING_REASON_FINAL_SUBCATEG'] = df['subcategory_matching_reason']

    invalid_subcat_mask = df['AI_FINAL_SUBCATEGORY'].isna() | df['AI_FINAL_SUBCATEGORY'].astype(str).str.strip().isin(["", "nan", "NaN"])
    df.loc[invalid_subcat_mask, 'AI_FINAL_SUBCATEGORY_CONFIDENCE'] = None
    df.loc[invalid_subcat_mask, 'AI_MATCHING_REASON_FINAL_SUBCATEG'] = None
    df.loc[invalid_subcat_mask, 'needs_subcategory_model'] = True
    df.loc[invalid_subcat_mask, 'needs_model'] = True

    invalid_cat_mask = df['AI_FINAL_CATEGORY'].isna() | df['AI_FINAL_CATEGORY'].astype(str).str.strip().isin(["", "nan", "NaN"])
    df.loc[invalid_cat_mask, 'AI_FINAL_CATEGORY_CONFIDENCE'] = None
    df.loc[invalid_cat_mask, 'AI_MATCHING_REASON_FINAL_CATEGORY'] = None
    df.loc[invalid_cat_mask, 'needs_category_model'] = True
    df.loc[invalid_cat_mask, 'needs_model'] = True

    df.drop(columns=[
        'Mapped_File_Category', 'Final Category Confidence Score', 'category_matching_reason',
        'Mapped_File_Subcategory', 'Final Subcategory Confidence Score', 'subcategory_matching_reason'
    ], inplace=True, errors='ignore')

    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    df.to_parquet(output_path, index=False)
    print(f"[✅] Final output saved to: {output_path}")

def main():
    process_only_one=True
    seen_components = set()
    parser = argparse.ArgumentParser()
    parser.add_argument("--input_path", type=str, required=True)
    parser.add_argument("--mapping_csv", type=str, required=True)
    parser.add_argument("--key_output", type=str, default="key_reference_output.parquet")
    parser.add_argument("--final_output", type=str, required=True)
    args = parser.parse_args()

    run = Run.get_context()
    ws = run.experiment.workspace

    parquet_files = glob.glob(os.path.join(args.input_path, "*.parquet"))
    if not parquet_files:
        raise FileNotFoundError(f"No parquet files found in {args.input_path}")

    csv_files = glob.glob(os.path.join(args.mapping_csv, "*.csv"))
    if not csv_files:
        raise FileNotFoundError(f"No CSV files found in {args.mapping_csv}")

    mapping_df = pd.read_csv(csv_files[0])

    for idx, file_path in enumerate(parquet_files):
        print(f"\n🔄 [Processing file]: {os.path.basename(file_path)}")
        try:
            df = pd.read_parquet(file_path)
            df = df[df['CMPNT_MATL_DESC'].notna()].drop_duplicates(subset=["CMPNT_MATL_NUM"])

            # Skip already seen components
            df = df[~df["CMPNT_MATL_NUM"].isin(seen_components)]
            if df.empty:
                print("[SKIPPED] All CMPNT_MATL_NUM already processed in previous files.")
                continue
            seen_components.update(df["CMPNT_MATL_NUM"].unique())
            df = ensure_ai_columns(df)
            df = apply_existing_ai_overrides(df)

            cat_map_1 = clean_mapping_df(mapping_df, DIRECT_MAP_KEY_1, 'Mapped_File_Category')
            cat_map_2 = clean_mapping_df(mapping_df, DIRECT_MAP_KEY_2, 'Mapped_File_Category')
            df = map_values(df, cat_map_1, cat_map_2, JOIN_COL_1, JOIN_COL_2,
                            DIRECT_MAP_KEY_1, DIRECT_MAP_KEY_2, 'Mapped_File_Category', 'Mapped_File_Category')

            sub_map_1 = clean_mapping_df(mapping_df, DIRECT_MAP_KEY_1, 'Mapped_File_Subcategory')
            sub_map_2 = clean_mapping_df(mapping_df, DIRECT_MAP_KEY_2, 'Mapped_File_Subcategory')
            df = map_values(df, sub_map_1, sub_map_2, JOIN_COL_1, JOIN_COL_2,
                            DIRECT_MAP_KEY_1, DIRECT_MAP_KEY_2, 'Mapped_File_Subcategory', 'Mapped_File_Subcategory')

            df = add_flags(df)

            if idx == 0:
                register_key_output(df, args.input_path, args.key_output, ws)

            output_file = os.path.join(args.final_output, f"mapped_{os.path.basename(file_path)}")
            finalize_output(df, output_file)
            # ✅ Stop after one file if flag is set
            if process_only_one:
                break

        except Exception as e:
            print(f"[❌ ERROR] Failed to process {file_path}: {e}")

        except Exception as e:
            print(f"[❌ ERROR] Failed to process {file_path}: {e}")

    register_final_output_dir(args.final_output, ws)
    print("\n✅ All files processed.")

if __name__ == "__main__":
    main()
