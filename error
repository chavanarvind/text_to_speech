import os
from typing import List

import pandas as pd

from cross_hound.config import IRRELEVANT_MATERIALS

xhound_folder = os.path.dirname(os.path.realpath(__file__))
src_folder = os.path.abspath(os.path.join(xhound_folder, os.pardir))

OFF_SPEC_LIST = pd.read_csv(f'{src_folder}/reference_tables/off_spec_items.csv', dtype=str)


def classify_as_off_spec(df: pd.DataFrame) -> List:
    '''
    df should have as first column the id and as second column the description

    Data can be either ERP or TRU as the OFF_SPEC_LIST includes both
    '''

    n = len(df)
    col_id = df.columns[0]
    col_desc = df.columns[1]

    df_reference = df.merge(OFF_SPEC_LIST[['id']].drop_duplicates(),
                            left_on=col_id,
                            right_on='id',
                            how='left')

    assert n == len(df_reference), 'duplicates produced after inspecting ids'

    df_reference = df_reference.merge(OFF_SPEC_LIST[['description']].drop_duplicates(),
                                      left_on=col_desc,
                                      right_on='description',
                                      how='left')

    # If either id or description are found in the off spec list, mark it as off spec
    based_on_list = df_reference[['id', 'description']].notna().any(axis=1)

    keyword_match = (df[col_desc]
                     .str
                     .lower()
                     .str
                     .contains('|'.join(IRRELEVANT_MATERIALS), case=False)
                     )
    keyword_match = (keyword_match | df[col_desc].str.lower().isin(['agua', 'aqua']))

    final_result = (based_on_list | keyword_match)
    return final_result
