import os
import glob
import argparse
import pandas as pd
from azureml.core import Run

# === Column to match ===
JOIN_COL_1 = "CMPNT_CAT_CD_DESC"
JOIN_COL_2 = "CMPNT_MATL_TYPE_CD"
DIRECT_MAP_KEY_1 = "Direct Mapping"
DIRECT_MAP_KEY_2 = "Direct Mapping"

# === Key Columns to output ===
KEY_COLS = [
    "ROW_NM", "SRC_SYS_CD", "MATL_NUM", "PLNT_CD", "CMPNT_MATL_NUM",
    "BOM_LVL_DTLS_NUM", "TRU_MATL_NUM", "CMPNT_RM_SPEC_CD",
    "CMPNT_PC_SPEC_CD", "CMPNT_DC_SPEC_CD", "RAW_MATL_TITLE_NM"
]

def process_file(file_path, mapping_df, mapped_dir, needs_model_dir, key_output_dir):
    try:
        df = pd.read_parquet(file_path)
        df.drop_duplicates(inplace=True)

        df[JOIN_COL_1] = df[JOIN_COL_1].fillna("").astype(str).str.strip()
        df[JOIN_COL_2] = df[JOIN_COL_2].fillna("").astype(str).str.strip()
        mapping_df[DIRECT_MAP_KEY_1] = mapping_df[DIRECT_MAP_KEY_1].astype(str).str.strip()
        mapping_df[DIRECT_MAP_KEY_2] = mapping_df[DIRECT_MAP_KEY_2].astype(str).str.strip()

        # Stage 1 mapping
        stage1_df = df.merge(mapping_df, how="inner", left_on=[JOIN_COL_1], right_on=[DIRECT_MAP_KEY_1])
        stage1_df['matching_reason'] = 'direct_mapping_category'
        stage1_df['confidence_score'] = 1.0

        # Stage 2 mapping
        df_not_mapped = df[~df['CMPNT_MATL_NUM'].isin(stage1_df['CMPNT_MATL_NUM'])]
        stage2_df = df_not_mapped.merge(mapping_df, how="inner", left_on=[JOIN_COL_2], right_on=[DIRECT_MAP_KEY_2])
        stage2_df['matching_reason'] = 'direct_mapping_type_only'
        stage2_df['confidence_score'] = 1.0

        mapped_df = pd.concat([stage1_df, stage2_df], ignore_index=True)
        mapped_df['Final Category Filled'] = mapped_df['Final Category'].notna() & mapped_df['Final Category'].str.strip().ne("")
        mapped_df['Final Subcategory Filled'] = mapped_df['Final Subcategory'].notna() & mapped_df['Final Subcategory'].str.strip().ne("")
        mapped_df['needs_model'] = ~mapped_df['Final Category Filled'] | ~mapped_df['Final Subcategory Filled']

        mapped_only_df = mapped_df[~mapped_df['needs_model']].copy()
        needs_model_df = mapped_df[mapped_df['needs_model']].copy()
        sample_dir = os.path.join("outputs", "samples_by_source")
        os.makedirs(sample_dir, exist_ok=True)
        needs_model_df.to_csv("outputs/needs_model_df.csv", index=False)


        # Drop datetime columns to avoid Parquet casting issues
        mapped_only_df = mapped_only_df.drop(columns=mapped_only_df.select_dtypes(include=["datetime64[ns]"]).columns)
        needs_model_df = needs_model_df.drop(columns=needs_model_df.select_dtypes(include=["datetime64[ns]"]).columns)

        base_name = os.path.basename(file_path)
        os.makedirs(mapped_dir, exist_ok=True)
        os.makedirs(needs_model_dir, exist_ok=True)

        mapped_only_df.to_parquet(os.path.join(mapped_dir, base_name), index=False)
        needs_model_df.to_parquet(os.path.join(needs_model_dir, base_name), index=False)

        # Save key reference
        if all(col in df.columns for col in KEY_COLS):
            key_df = df[KEY_COLS].drop_duplicates()
            key_df = key_df.drop(columns=key_df.select_dtypes(include=["datetime64[ns]"]).columns)
            os.makedirs(key_output_dir, exist_ok=True)
            key_df.to_parquet(os.path.join(key_output_dir, base_name), index=False)
            print(f"üîë Saved key reference: {base_name}")

    except Exception as e:
        print(f"‚ùå Failed to process {file_path}: {e}")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--input_path", type=str, required=True)
    parser.add_argument("--mapping_csv", type=str, required=True)
    parser.add_argument("--mapped_output", type=str, required=True)
    parser.add_argument("--needs_model_output", type=str, required=True)
    parser.add_argument("--key_output", type=str, required=True)
    args = parser.parse_args()

    run = Run.get_context()

    csv_files = glob.glob(os.path.join(args.mapping_csv, "*.csv"))
    if not csv_files:
        raise FileNotFoundError(f"No CSV file found in mapped directory: {args.mapping_csv}")

    mapping_df = pd.read_csv(csv_files[0]).drop_duplicates()
    all_files = glob.glob(os.path.join(args.input_path, "*.parquet"))

    # Process only first 2 files for testing
    for file_path in all_files[:3]:
        process_file(file_path, mapping_df, args.mapped_output, args.needs_model_output, args.key_output)

if __name__ == "__main__":
    main()
