import os
import joblib
import numpy as np
import pandas as pd
from lightgbm import LGBMClassifier
from sklearn.metrics import classification_report, confusion_matrix

# --- Paths ---
data_dir = './data/validation_step/model_artifects'
X_path = os.path.join(data_dir, 'X_full.npy')
y_path = os.path.join(data_dir, 'y_full.npy')
model_path = os.path.join(data_dir, 'final_model.joblib')
pred_output = os.path.join(data_dir, 'prediction_scores.csv')

# --- Load Data ---
X = np.load(X_path)
y = np.load(y_path)
print(f"âœ… Loaded shapes: X={X.shape}, y={y.shape}")

# --- Train Model ---
model = LGBMClassifier(class_weight='balanced', random_state=42)
model.fit(X, y)
joblib.dump(model, model_path)
print("âœ… LightGBM model trained and saved.")

# --- Predict with probabilities ---
y_pred = model.predict(X)
y_proba = model.predict_proba(X)
y_score = np.max(y_proba, axis=1)

# --- Replace low-confidence predictions ---
final_pred = np.where(y_score < 0.6, 'Other', y_pred)

# --- Save prediction summary ---
pred_df = pd.DataFrame({
    'Original': y,
    'Predicted': y_pred,
    'Score': y_score,
    'Final_Prediction': final_pred
})

pred_df.to_csv(pred_output, index=False)
print("âœ… Prediction scores saved to prediction_scores.csv")

# --- Optional: Print Classification Report ---
print("\nðŸ“Š Classification Report:")
print(classification_report(y, final_pred))

print("\nðŸ”¢ Confusion Matrix:")
print(confusion_matrix(y, final_pred))
