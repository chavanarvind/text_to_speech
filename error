import gradio as gr
import os
import uuid
import time
import requests
import certifi
from datetime import datetime, timedelta
from azureml.core import Workspace
from azure.storage.blob import BlobServiceClient, generate_blob_sas, BlobSasPermissions
from urllib.parse import quote_plus
from azureml.core import Workspace, Datastore
from azure.identity import DefaultAzureCredential

# === AzureML Workspace and Datastore Config ===
SUBSCRIPTION_ID = "a8d518a9-4587-4ba2-9a60-68b980c2f000"
RESOURCE_GROUP = "AZR-WDZ-DTO-AML-Development"
WORKSPACE_NAME = "AML-DTO-Marmot-dev"

ENDPOINT = "https://cog-speech-dto-epil-dev.cognitiveservices.azure.com/"
AZURE_SPEECH_KEY = "BBvpAQdmiBQWNukOTc5F2tIb5Ln7TuubMiQGbbkSSO2GJDR6ZK09JQQJ99AKACYeBjFXJ3w3AAAYACOG1LLR"
API_VERSION = "2025-05-20"

def sanitize_filename(filename):
    return filename.replace(" ", "_")

def upload_to_blob_storage(local_path):
    # AzureML workspace context
    ws = Workspace(
        subscription_id="a8d518a9-4587-4ba2-9a60-68b980c2f000",
        resource_group="AZR-WDZ-DTO-AML-Development",
        workspace_name="AML-DTO-Marmot-dev"
    )

    # Your container and storage account
    container_name = "video"
    storage_account_name = "adlsdtodsdev"
    blob_path = f"video-uploads/{sanitize_filename(os.path.basename(local_path))}"

    # Authenticate using your logged-in identity
    credential = DefaultAzureCredential()

    # Create client
    blob_service_client = BlobServiceClient(
        account_url=f"https://{storage_account_name}.blob.core.windows.net",
        credential=credential
    )
    container_client = blob_service_client.get_container_client(container_name)

    # Upload
    with open(local_path, "rb") as data:
        try:
            container_client.upload_blob(name=blob_path, data=data, overwrite=True)
        except Exception as e:
            print(f"[ERROR] Upload failed: {e}")
            raise

    # ❗You cannot generate a SAS token without the storage key
    # So we return the public blob URL — ensure container allows access by identity

    blob_url = f"https://{storage_account_name}.blob.core.windows.net/{container_name}/{quote_plus(blob_path)}"

    # Optional: Check if URL is accessible
    try:
        r = requests.head(blob_url, verify=certifi.where())
        if r.status_code != 200:
            print(f"[WARNING] Blob may not be publicly accessible (status {r.status_code})")
    except Exception as e:
        print(f"[ERROR] Blob access check failed: {e}")

    return blob_url

# === Create translation job ===
def create_video_translation_job(blob_url, source_lang, target_lang):
    job_id = f"gradio-job-{uuid.uuid4()}"
    url = f"{ENDPOINT}/videotranslation/translations/{job_id}?api-version={API_VERSION}"
    headers = {
        "Ocp-Apim-Subscription-Key": AZURE_SPEECH_KEY,
        "Content-Type": "application/json",
        "Operation-Id": job_id
    }

    payload = {
        "displayName": job_id,
        "description": "Gradio video translation",
        "input": {
            "sourceLocale": source_lang,
            "targetLocale": target_lang,
            "voiceKind": "PlatformVoice",
            "speakerCount": 1,
            "subtitleMaxCharCountPerSegment": 50,
            "exportSubtitleInVideo": True,
            "enableLipSync": False,
            "mediaFileUri": blob_url  # FIXED
        },
        "targets": [
            {
                "language": target_lang,
                "outputFormat": "video"
            }
        ],
        "properties": {
            "diarizationEnabled": "true",
            "ttsVoice": f"{target_lang}-DeniseNeural"
        }
    }

    response = requests.put(url, headers=headers, json=payload, verify=certifi.where())
    if response.status_code >= 400:
        return None, f"[ERROR] Failed to submit translation job: {response.status_code}\n{response.text}"
    return job_id, None

# === Poll job status ===
def poll_job_and_get_output(job_id):
    url = f"{ENDPOINT}/videotranslation/translations/{job_id}?api-version={API_VERSION}"
    headers = {"Ocp-Apim-Subscription-Key": AZURE_SPEECH_KEY}
    for _ in range(30):
        resp = requests.get(url, headers=headers, verify=certifi.where())
        result = resp.json()
        status = result.get("status")
        if status == "Succeeded":
            return result.get("results", {}).get("urls", {})
        elif status == "Failed":
            return {"error": "Translation failed."}
        time.sleep(10)
    return {"error": "Timeout waiting for translation to finish."}

# === Translate video end-to-end ===
def translate_video(video_file, source_lang, target_lang):
    import logging
    logging.basicConfig(level=logging.INFO, format="[%(asctime)s] %(message)s")
    logger = logging.getLogger("video-translator")

    logger.info("Uploading video to Azure Blob Storage...")
    video_path = video_file.name if hasattr(video_file, "name") else video_file
    blob_url = upload_to_blob_storage(video_path)
    logger.info(f"Upload complete: {blob_url}")

    logger.info("Submitting video translation job to Azure...")
    job_id, error = create_video_translation_job(blob_url, source_lang, target_lang)
    if error:
        logger.error(error)
        return blob_url, "Translation job submission failed.", ""

    logger.info(f"Job submitted: {job_id}")
    logger.info("Polling job status...")
    result = poll_job_and_get_output(job_id)

    translated_url = result.get("video")
    if not translated_url:
        logger.error("Translation failed or no result video.")
        return blob_url, "Translation failed or timed out.", ""

    logger.info(f"Translation completed. Output URL: {translated_url}")
    return blob_url, "Translation succeeded.", translated_url

# === Gradio UI ===
def gradio_interface(video, source_lang, target_lang):
    return translate_video(video, source_lang, target_lang)

iface = gr.Interface(
    fn=gradio_interface,
    inputs=[
        gr.Video(label="Upload Video (.mp4)"),
        gr.Textbox(label="Source Language (e.g., en-US)", value="en-US"),
        gr.Textbox(label="Target Language (e.g., es-ES)", value="es-ES")
    ],
    outputs=[
        gr.Textbox(label="Original Video Blob URL"),
        gr.Textbox(label="Status"),
        gr.Textbox(label="Translated Video URL")
    ],
    title="Azure Video Translator using AML Blob Datastore"
)

iface.launch()
