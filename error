
#CMPNT_MATL_TYPE_CD


#step 2
# Load SpaCy NLP model
nlp = spacy.load("en_core_web_sm")

# Rule hint logic
def get_rule_hint(text):
    if pd.isna(text): return None
    doc = nlp(text)
    lemmas = set(token.lemma_ for token in doc)
    if lemmas & {'api', 'active'}:
        return 'API'
    elif lemmas & {'cream', 'gel', 'emulsion', 'ointment', 'moisturiser','oil','gel','liquid'}:
        return 'Liquids and Creams'
    elif lemmas & {'bottle', 'cap', 'carton', 'label', 'cotton','lotion','mouthwash','pkg','pack','karton','package'}:
        return 'PKG'
    elif lemmas & {'excipient', 'binder', 'bind', 'filler', 'fill', 'lubricant', 'lubricate','acid','shampoos','alcohol'}:
        return 'CHM'
    return None

# Apply to all Parquet files
input_path = './data/target_map_parquet_files'
for file in glob.glob(os.path.join(input_path, '*.parquet')):
    try:
        df = pd.read_parquet(file)

        # Ensure CMPNT_CAT_CLEAN exists
        if 'CMPNT_CAT_CLEAN' not in df.columns:
            df['CMPNT_CAT_CLEAN'] = df['CMPNT_CAT_CD_DESC'].fillna('').apply(clean_text).replace('', pd.NA)

        # Apply RULE_HINT
        df['RULE_HINT'] = df['CMPNT_CAT_CLEAN'].apply(get_rule_hint)

        # Save
        df.to_parquet(file, index=False)
        print(f"RULE_HINT added to: {file}")

    except Exception as e:
        print(f"Error updating RULE_HINT in {file}: {e}")
