#step_6_finalize_output

import os
import argparse
import pandas as pd
from datetime import datetime
from azureml.core import Run

def log(msg):
    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

REQUIRED_COLUMNS = [
    "CMPNT_MATL_NUM",
    "Final_Prediction",
    "Final Subcategory",
    "Score",
    "Subcategory_Score",
    "inferred_category_model",
    "Subcategory_Model"
]

RENAMED_COLUMNS = {
    "Final_Prediction": "AI_FINAL_CATEGORY",
    "Final Subcategory": "AI_FINAL_SUBCATEGORY",
    "Score": "AI_FINAL_CATEGORY_CONFIDENCE",
    "Subcategory_Score": "AI_FINAL_SUBCATEGORY_CONFIDENCE",
    "inferred_category_model": "AI_MATCHING_REASON_FINAL_CATEGORY",
    "Subcategory_Model": "AI_MATCHING_REASON_FINAL_SUBCATEGORY"
}

def main(inference_output_dir, key_output_dir, final_output_dir):
    run = Run.get_context()

    all_predictions = []

    log(f"Reading inference files from: {inference_output_dir}")
    for file in os.listdir(inference_output_dir):
        if file.endswith(".parquet"):
            df = pd.read_parquet(os.path.join(inference_output_dir, file))
            all_predictions.append(df)

    if not all_predictions:
        raise Exception("No inference files found.")

    df = pd.concat(all_predictions, ignore_index=True)
    df = df[REQUIRED_COLUMNS]
    df = df.rename(columns=RENAMED_COLUMNS)

    # Deduplicate
    df = df.drop_duplicates(subset="CMPNT_MATL_NUM")

    log(f"‚úÖ Final unique records: {len(df)}")
    os.makedirs(final_output_dir, exist_ok=True)

    for file in os.listdir(key_output_dir):
        if file.endswith(".parquet"):
            key_df = pd.read_parquet(os.path.join(key_output_dir, file))
            merged = key_df.merge(df, how="left", on="CMPNT_MATL_NUM")
            merged.to_parquet(os.path.join(final_output_dir, file), index=False)
            log(f"üîÅ Merged with key file: {file}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--inference_output_dir", required=True)
    parser.add_argument("--key_output_dir", required=True)
    parser.add_argument("--final_output_dir", required=True)
    args = parser.parse_args()

    main(args.inference_output_dir, args.key_output_dir, args.final_output_dir)
