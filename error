# --- Key Subset (process independently) ---
df_key = df[key_cols].copy()
df_key = df_key[df_key['LOGL_KEY_COMB_COL_VAL'].notna()].drop_duplicates(subset=["LOGL_KEY_COMB_COL_VAL"])
df_key = df_key[~df_key['LOGL_KEY_COMB_COL_VAL'].isin(seen_keys)]

if not df_key.empty:
    seen_keys.update(df_key["LOGL_KEY_COMB_COL_VAL"].unique())
    key_output_file = os.path.join(args.key_output, f"key_{os.path.basename(file_path)}")
    df_key.to_parquet(key_output_file, index=False)
    print(f"üß© Saved key file: {key_output_file}")
else:
    print("üîÅ No new keys to save for this file.")

# --- Mapping Subset (process independently) ---
df_mapping = df[mapping_cols].copy()
df_mapping = df_mapping[df_mapping['CMPNT_MATL_DESC'].notna()].drop_duplicates(subset=["CMPNT_MATL_NUM"])
df_mapping = df_mapping[~df_mapping["CMPNT_MATL_NUM"].isin(seen_components)]

if not df_mapping.empty:
    seen_components.update(df_mapping["CMPNT_MATL_NUM"].unique())

    # Rest of your mapping and final output logic here
    df_mapping = ensure_ai_columns(df_mapping)
    df_mapping = apply_existing_ai_overrides(df_mapping)

    cat_map_1 = clean_mapping_df(mapping_df, DIRECT_MAP_KEY_1, 'Mapped_File_Category')
    cat_map_2 = clean_mapping_df(mapping_df, DIRECT_MAP_KEY_2, 'Mapped_File_Category')
    df_mapping = map_values(df_mapping, cat_map_1, cat_map_2, JOIN_COL_1, JOIN_COL_2,
                            DIRECT_MAP_KEY_1, DIRECT_MAP_KEY_2, 'Mapped_File_Category', 'Mapped_File_Category')

    sub_map_1 = clean_mapping_df(mapping_df, DIRECT_MAP_KEY_1, 'Mapped_File_Subcategory')
    sub_map_2 = clean_mapping_df(mapping_df, DIRECT_MAP_KEY_2, 'Mapped_File_Subcategory')
    df_mapping = map_values(df_mapping, sub_map_1, sub_map_2, JOIN_COL_1, JOIN_COL_2,
                            DIRECT_MAP_KEY_1, DIRECT_MAP_KEY_2, 'Mapped_File_Subcategory', 'Mapped_File_Subcategory')

    df_mapping = add_flags(df_mapping)

    mapped_output_file = os.path.join(args.final_output, f"mapped_{os.path.basename(file_path)}")
    finalize_output(df_mapping, mapped_output_file)
else:
    print("[SKIPPED] All components already processed.")
