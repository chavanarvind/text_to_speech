

import re

import pandas as pd
 
# Compile regex patterns once

patterns = {

    'non_alphanumeric': re.compile('[^A-Za-z0-9&% ]+'),

    'percent_space': re.compile(r"\s*%\s*"),

    'canada_variants': re.compile(r'(canada|can|(ca\d+)$|ca)'),

    'remove_canada': re.compile('canada\s*(\d{2,})|(canada\d+)|canada|can\s*(\d{2,})|(can\d+)|can|(ca\d+)|ca\s(\d{2,})|ca$|(ca\s)'),

    'units': re.compile(r"(\D)(\d+)(\s*)(ml|l|gr|gm|g|ct)"),

    'spf_space': re.compile("(\s)(spf)\s*([\d+])"),

    'units_no_space': re.compile('([\d+])\s*(?:ml|l|gr|gm|g|ct)(?: |$)'),

    'spf_number': re.compile(r"(\D)(spf\d+)")

}
 
 
df = pd.DataFrame(...)  # Your DataFrame initialization
 
df['target'] = df['source'].str.lower() \

    .str.replace(patterns['non_alphanumeric'], '', regex=True) \

    .str.replace(patterns['percent_space'], "% ", regex=True) \

    .str.replace(patterns['canada_variants'], r' \1', regex=True) \

    .str.replace(patterns['remove_canada'], '', regex=True) \

    .str.replace(patterns['units'], r"\1 \2\3\4 ", regex=True) \

    .str.replace(patterns['spf_space'], r"\1\2\3", regex=True) \

    .str.replace(patterns['units_no_space'], lambda z: z.group().replace(" ", ""), regex=True) \

    .str.replace(patterns['spf_number'], r'\1 \2 ', regex=True)
 
rewrite this python script to optimize its speed. Use .str instead of apply and compile all the regex patterns only once: import re
 
