import os
import re
import time
import glob
import pandas as pd
from concurrent.futures import ThreadPoolExecutor

# --- Precompiled regex patterns ---
patterns = {
    'non_alphanumeric': re.compile(r'[^A-Za-z0-9&% ]+'),
    'percent_space': re.compile(r"\s*%\s*"),
    'canada_variants': re.compile(r'(canada|can|(ca\d+)$|ca)'),
    'remove_canada': re.compile(r'canada\s*(\d{2,})|(canada\d+)|canada|can\s*(\d{2,})|(can\d+)|can|(ca\d+)|ca\s(\d{2,})|ca$|(ca\s)'),
    'units': re.compile(r"(\D)(\d+)(\s*)(ml|l|gr|gm|g|ct)"),
    'spf_space': re.compile(r"(\s)(spf)\s*([\d+])"),
    'units_no_space': re.compile(r'([\d+])\s*(?:ml|l|gr|gm|g|ct)(?: |$)'),
    'spf_number': re.compile(r"(\D)(spf\d+)")
}

# --- Function to clean an entire Series using str.replace chain ---
def clean_series(series):
    return (series.str.lower()
        .str.replace(patterns['non_alphanumeric'], '', regex=True)
        .str.replace(patterns['percent_space'], '% ', regex=True)
        .str.replace(patterns['canada_variants'], r' \1', regex=True)
        .str.replace(patterns['remove_canada'], '', regex=True)
        .str.replace(patterns['units'], r'\1 \2\3\4 ', regex=True)
        .str.replace(patterns['spf_space'], r'\1\2\3', regex=True)
        .str.replace(patterns['units_no_space'], lambda z: z.group().replace(" ", ""), regex=True)
        .str.replace(patterns['spf_number'], r'\1 \2 ', regex=True)
    )

# --- Per-file processing ---
def text_clean_step(file):
    try:
        print(f"🔄 Processing: {os.path.basename(file)}")
        start = time.time()

        df = pd.read_parquet(file)

        # Clean both columns
        df['MATL_SHRT_DESC'] = clean_series(df['MATL_SHRT_DESC'].fillna(''))
        df['CMPNT_MATL_DESC'] = clean_series(df['CMPNT_MATL_DESC'].fillna(''))

        # Create combined column
        df['MATL_SHRT_DESC_AND_CMPNT_MATL_DESC'] = (df['MATL_SHRT_DESC'] + ' ' + df['CMPNT_MATL_DESC']).str.strip()

        # Save to same location (or modify path if needed)
        df.to_parquet(file, index=False)

        print(f"✅ Done: {os.path.basename(file)} | ⏱️ {time.time() - start:.2f}s")
    except Exception as e:
        print(f"❌ Failed: {os.path.basename(file)} -> {e}")


# Multithreaded execution
input_path = './data/target_map_parquet_files'
all_files = glob.glob(os.path.join(input_path, '*.parquet'))
with ThreadPoolExecutor(max_workers=os.cpu_count()) as executor:
    for file_idx, file in enumerate(all_files):
        executor.submit(text_clean_step, file_idx, file)
