import os
import glob
import pandas as pd
from multiprocessing import Pool, cpu_count

# --- Category mapping function ---
def map_cmpnt_type_category(val):
    if pd.isna(val):
        return 'OTHER'
    val = str(val).strip().lower()
    if len(val) <= 5 and val.isalnum():
        return 'ERP_CODE'
    if any(x in val for x in ['packaging', 'bottle', 'jar', 'cap', 'carton', 'tube', 'pouch', 'closure']):
        return 'PACKAGING'
    if any(x in val for x in ['chemical', 'solvent', 'alcohol', 'acid', 'buffer', 'salt', 'preservative']):
        return 'CHEMICAL'
    if any(x in val for x in ['actives', 'naturals', 'flavor', 'fragrance', 'api']):
        return 'ACTIVES_NATURALS'
    if any(x in val for x in ['film', 'foil', 'label', 'sleeve']):
        return 'FILMS_LABELS'
    if any(x in val for x in ['soap', 'conditioner', 'emulsifier', 'thickener', 'talc', 'sunscreen']):
        return 'COSMETIC_BASE'
    if any(x in val for x in ['glass', 'pump', 'puff']):
        return 'CONTAINERS'
    return 'OTHER'

# --- Processing function ---
def process_file(file_path):
    try:
        df = pd.read_parquet(file_path)

        # Filter only rows with non-null Final Category
        df = df[df['Final Category'].notna()]
        if df.empty:
            print(f"⚠️ Skipped (no valid rows): {os.path.basename(file_path)}")
            return

        # Apply CMPNT_TYPE_CATEGORY logic
        df['CMPNT_MATL_TYPE_CATEGORY'] = df['CMPNT_MATL_TYPE_CD'].apply(map_cmpnt_type_category)

        # Save updated file
        output_file = file_path.replace("target_map_cleaned_non_null_target", "target_map_with_rules")
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        df.to_parquet(output_file, index=False)

        print(f"✅ Done: {os.path.basename(file_path)}")
    except Exception as e:
        print(f"❌ Failed: {os.path.basename(file_path)} -> {e}")

# --- Parallel execution ---
if __name__ == '__main__':
    input_path = './data/target_map_cleaned_non_null_target'
    all_files = glob.glob(os.path.join(input_path, '*.parquet'))

    with Pool(cpu_count()) as pool:
        pool.map(process_file, all_files)
