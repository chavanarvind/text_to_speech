def match_erp_part_vs_rm_title(erp: pd.DataFrame,
                               tru: pd.DataFrame,
                               last_match_round: int,
                               bundles) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame, int]:
    match_round_name = f'{last_match_round + 1}: ERP Part vs RM Title'
    print(f'MATCH ROUND {match_round_name}')
    start = time.time()

    list_df_matches = []

    for material_number_src_sys_plant, sub_df_erp in erp[ERP_MATCH_COLS].groupby(
            [ERP_MAT_NUM, 'SRC_SYS_CD', 'PLNT_CD']):
        material_number, src_sys, plant = material_number_src_sys_plant

        sub_df_tru = tru.query(f'{TRU_MAT_NUM}=="{material_number}" and '
                               f'PLNT_CD=="{plant}" and '
                               f'SRC_SYS_CD=="{src_sys}"').reset_index(drop=True)[TRU_MATCH_COLS]
        if sub_df_tru.empty:
            continue

        for i, row_erp in sub_df_erp.iterrows():
            erp_part_id = row_erp[ERP_PART_ID]
            if len(erp_part_id) < 4:
                continue
            is_match = custom_contains(sub_df_tru[TRU_SPEC_DESC], erp_part_id)

            if not any(is_match):
                continue

            tru_cols = TRU_MATCH_COLS.copy()
            tru_cols = list(set(tru_cols) - {'SRC_SYS_CD', 'PLNT_CD'})
            tru_section = sub_df_tru[is_match][tru_cols]

            erp_section = pd.DataFrame(data=[row_erp for i in tru_section.index], index=tru_section.index)

            partial_matches = pd.concat([erp_section, tru_section], axis=1)
            partial_matches.reset_index(drop=True, inplace=True)
            list_df_matches.append(partial_matches)

    # âœ… Safeguard against empty list
    if not list_df_matches:
        print(f"No matches found in round {match_round_name}")
        return pd.DataFrame(), erp, tru, last_match_round + 1

    matches = pd.concat(list_df_matches, ignore_index=True)

    matches[SCORE_COL] = 1
    matches[UNIFIED_MC_COL] = matches[f'{ERP_MAT_NUM}_original'].copy()
    matches['is_matched'] = True
    matches['Matching Reason'] = 'The ERP Part ID is mentioned in the Tru Title'
    matches['confidence'] = 'high'

    matches = add_matches_bundles(matches, bundles, tru)
    assign_round_name_and_report_time(matches, match_round_name, start)
    df_erp_to_match, df_tru_to_match = get_data_yet_to_match(matches, erp, tru)
    return matches, df_erp_to_match, df_tru_to_match, last_match_round + 1
