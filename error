from azureml.core import Workspace, Environment, Experiment, Dataset, Datastore
from azureml.pipeline.core import Pipeline
from azureml.pipeline.steps import PythonScriptStep
from azureml.core.runconfig import RunConfiguration
from azureml.data import OutputFileDatasetConfig
from datetime import datetime
import sys

# === Date ===
today = datetime.today().strftime("%d%m%Y")

# === Load Workspace ===
SUBSCRIPTION_ID = "a8d518a9-4587-4ba2-9a60-68b980c2f000"
RESOURCE_GROUP = "AZR-WDZ-DTO-AML-Development"
WORKSPACE_NAME = "AML-DTO-Marmot-dev"

def get_workspace(use_sp_auth=False, args=None):
    if use_sp_auth and args and len(args) >= 4:
        from azureml.core.authentication import ServicePrincipalAuthentication
        sp_auth = ServicePrincipalAuthentication(
            tenant_id=args[1],
            service_principal_id=args[2],
            service_principal_password=args[3]
        )
        return Workspace(subscription_id=SUBSCRIPTION_ID,
                         resource_group=RESOURCE_GROUP,
                         workspace_name=WORKSPACE_NAME,
                         auth=sp_auth)
    else:
        return Workspace(subscription_id=SUBSCRIPTION_ID,
                         resource_group=RESOURCE_GROUP,
                         workspace_name=WORKSPACE_NAME)

# === Init ===
ws = get_workspace(use_sp_auth=(len(sys.argv) > 3), args=sys.argv)
compute_name = "llm-gpu-cluster-2"
env = Environment.get(workspace=ws, name="Bom_X_Evaluator")
ds = ws.datastores["xbomrefadlsg2"]

run_config = RunConfiguration()
run_config.target = compute_name
run_config.environment = env

# === Use registered datasets ===
raw_input = Dataset.get_by_name(ws, "raw_predictions").as_named_input("inference_output_dir").as_mount()
key_input = Dataset.get_by_name(ws, "hbom_key_files").as_named_input("key_output_dir").as_mount()

# === Output location for final .parquet ===
final_merged_output = OutputFileDatasetConfig(
    name="final_merged_predictions",
    destination=(ds, f"hbom_category_prediction/hbom_category_prediction_{today}/")
)

# === Step 6: Finalize Output ===
finalize_step = PythonScriptStep(
    name="Step 6 - Finalize Output (Priority + Dedup)",
    script_name="step_6_finalize_output_global_debug.py",
    source_directory="scripts",
    arguments=[
        "--inference_output_dir", raw_input,
        "--key_output_dir", key_input,
        "--final_output_dir", final_merged_output
    ],
    inputs=[raw_input, key_input],
    outputs=[final_merged_output],
    compute_target=compute_name,
    runconfig=run_config,
    allow_reuse=False
)

# === Build & Submit ===
pipeline = Pipeline(workspace=ws, steps=[finalize_step])
pipeline.validate()

experiment = Experiment(ws, "step6_finalize_only_pipeline")
run = experiment.submit(pipeline)
run.wait_for_completion(show_output=True)
