def handle_off_spec_rejections(matched_df: pd.DataFrame,
                               rejection_file_path: str,
                               erp_mapping_file_path: str,
                               debug_cmpnt_num: str = None,
                               debug_child_nm: str = None) -> pd.DataFrame:
    """
    Adjust matches based on forced off-spec rejections.

    - rejection_file_path: path to rejections_fortrea.csv (pairs to reject even if matched)
    - erp_mapping_file_path: path to erp_off_spec.csv (pairs or comp-id to force as non-match)
    """

    print("üîÑ Applying off-spec rejection logic...")

    # Load rejections_fortrea.csv
    rejection_df = pd.read_csv(rejection_file_path, dtype=str).fillna('')

    # Load erp_off_spec.csv
    erp_mapping_df = pd.read_csv(erp_mapping_file_path, dtype=str).fillna('')

    # --- STEP 1: Handle pairs in rejection file ---
    if not rejection_df.empty:
        merged_rejection = matched_df.merge(
            rejection_df,
            on=['CMPNT_MATL_NUM', 'CHILD_NM'],
            how='left',
            indicator=True
        )
        mask_rejection = merged_rejection['_merge'] == 'both'
        matched_df.loc[mask_rejection, 'Matching Reason'] = 'Forced Rejection'
        matched_df.loc[mask_rejection, 'is_matched'] = False
        print(f"üö´ Forced rejection for {mask_rejection.sum()} rows from rejections_fortrea.csv")

    # --- STEP 2: Handle comp-only and pair-based rejections in erp_off_spec.csv ---
    if not erp_mapping_df.empty:
        # Comp-ID only rejections (where CHILD_NM is blank or missing)
        comp_only_ids = erp_mapping_df.loc[erp_mapping_df['CHILD_NM'].eq('') | erp_mapping_df['CHILD_NM'].isna(), 'CMPNT_MATL_NUM'].unique()
        mask_comp_only = matched_df['CMPNT_MATL_NUM'].isin(comp_only_ids)
        matched_df.loc[mask_comp_only, 'Matching Reason'] = 'Off Spec Non Match (Comp-ID only)'
        matched_df.loc[mask_comp_only, 'is_matched'] = False
        print(f"‚ùå Off Spec Non Match applied to {mask_comp_only.sum()} rows for Comp-ID only matches")

        # Pair-based rejections (where both CMPNT_MATL_NUM and CHILD_NM exist)
        pair_rejections = erp_mapping_df.dropna(subset=['CHILD_NM']).copy()
        if not pair_rejections.empty:
            merged_erp = matched_df.merge(
                pair_rejections,
                on=['CMPNT_MATL_NUM', 'CHILD_NM'],
                how='left',
                indicator=True
            )
            mask_pair_rejection = merged_erp['_merge'] == 'both'
            matched_df.loc[mask_pair_rejection, 'Matching Reason'] = 'Off Spec Non Match (Pair)'
            matched_df.loc[mask_pair_rejection, 'is_matched'] = False
            print(f"‚ùå Off Spec Non Match applied to {mask_pair_rejection.sum()} rows for Comp+Child pairs")

    # --- Debugging ---
    if debug_cmpnt_num:
        debug_rows = matched_df[matched_df['CMPNT_MATL_NUM'] == debug_cmpnt_num]
        if debug_child_nm:
            debug_rows = debug_rows[debug_rows['CHILD_NM'] == debug_child_nm]
        print(f"üîç Debug rows for {debug_cmpnt_num}/{debug_child_nm or '*'}:")
        print(debug_rows)

    return matched_df
