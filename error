import os
import re
import time
import pandas as pd

# --- Paths ---
input_file = './data/sample.parquet'
output_file = './data/sample_cleaned.parquet'
os.makedirs(os.path.dirname(output_file), exist_ok=True)

# --- Precompiled regex patterns ---
patterns = {
    'non_alphanumeric': re.compile(r'[^A-Za-z0-9&% ]+'),
    'percent_space': re.compile(r"\s*%\s*"),
    'canada_variants': re.compile(r'(canada|can|(ca\d+)$|ca)'),
    'remove_canada': re.compile(r'canada\s*(\d{2,})|(canada\d+)|canada|can\s*(\d{2,})|(can\d+)|can|(ca\d+)|ca\s(\d{2,})|ca$|(ca\s)'),
    'units': re.compile(r"(\D)(\d+)(\s*)(ml|l|gr|gm|g|ct)"),
    'spf_space': re.compile(r"(\s)(spf)\s*([\d+])"),
    'units_no_space': re.compile(r'([\d+])\s*(?:ml|l|gr|gm|g|ct)(?: |$)'),
    'spf_number': re.compile(r"(\D)(spf\d+)")
}

# --- Cleaning logic ---
def clean_series(series):
    return (series.str.lower()
        .str.replace(patterns['non_alphanumeric'], '', regex=True)
        .str.replace(patterns['percent_space'], '% ', regex=True)
        .str.replace(patterns['canada_variants'], r' \1', regex=True)
        .str.replace(patterns['remove_canada'], '', regex=True)
        .str.replace(patterns['units'], r'\1 \2\3\4 ', regex=True)
        .str.replace(patterns['spf_space'], r'\1\2\3', regex=True)
        .str.replace(patterns['units_no_space'], lambda z: z.group().replace(" ", ""), regex=True)
        .str.replace(patterns['spf_number'], r'\1 \2 ', regex=True)
    )

# --- Processing the single file ---
try:
    print(f"⏳ Cleaning file: {os.path.basename(input_file)}")
    start = time.time()

    df = pd.read_parquet(input_file)

    df['MATL_SHRT_DESC'] = clean_series(df['MATL_SHRT_DESC'].fillna(''))
    df['CMPNT_MATL_DESC'] = clean_series(df['CMPNT_MATL_DESC'].fillna(''))

    df['MATL_SHRT_DESC_AND_CMPNT_MATL_DESC'] = (
        df['MATL_SHRT_DESC'] + ' ' + df['CMPNT_MATL_DESC']
    ).str.strip()

    df.to_parquet(output_file, index=False)

    print(f"✅ Done: {input_file} → {output_file} | ⏱️ {time.time() - start:.2f}s")
except Exception as e:
    print(f"❌ Failed: {os.path.basename(input_file)} -> {e}")
