def match_by_reference_table(erp: pd.DataFrame,
                             tru: pd.DataFrame,
                             reference_table: pd.DataFrame,
                             last_match_round: int,
                             round_name: str,
                             bundles,
                             erp_full: pd.DataFrame,
                             tru_full: pd.DataFrame):
    """
    Match records using a reference table.
    For NLP_LIST_ERP, run FORCE PAIR matching first (on all pairs),
    then run normal matching.
    """
    match_round_name = f'{last_match_round + 1}: {round_name}'
    print(f'🚀 MATCH ROUND {match_round_name}')
    start = time.time()

    matches = pd.DataFrame()

    # 🟣 STEP 1: FORCE PAIR LOGIC FIRST for NLP_LIST_ERP
    if "nlp_list_erp" in round_name.lower():
        print("-" * 60)
        print(f"🔄 FORCE PAIR LOGIC FOR ALL REFERENCE PAIRS in {round_name}")

        forced_pairs = reference_table[[ERP_PART_ID, TRU_SPEC_ID]].drop_duplicates()

        # 🚀 Process all pairs directly from erp_full and tru_full
        forced_matches = erp_full[ERP_MATCH_COLS].merge(
            forced_pairs, on=ERP_PART_ID, how='inner'
        ).merge(
            tru_full[TRU_MATCH_COLS],
            left_on=['SRC_SYS_CD', 'PLNT_CD', TRU_SPEC_ID],
            right_on=['SRC_SYS_CD', 'PLNT_CD', TRU_SPEC_ID],
            how='inner'
        )

        if not forced_matches.empty:
            print(f"✅ Found {len(forced_matches)} forced matches in {round_name}")
            forced_matches[SCORE_COL] = 1
            forced_matches[UNIFIED_MC_COL] = forced_matches[f'{ERP_MAT_NUM}_original'].copy()
            forced_matches['is_matched'] = True
            forced_matches['Matching Reason'] = round_name + ' (forced pair)'
            forced_matches['confidence'] = 'high'
            forced_matches = add_matches_bundles(forced_matches, bundles, tru_full)

            matches = pd.concat([matches, forced_matches], ignore_index=True)
        else:
            print("🚫 No forced matches found in ERP/TRU full datasets")

    # 🟢 STEP 2: NORMAL MATCHING (ID + description)
    print("-" * 60)
    print("🔄 Running NORMAL matching logic")
    df_erp_with_additional_id = erp[ERP_MATCH_COLS].merge(
        reference_table[[ERP_PART_ID, TRU_SPEC_ID]].drop_duplicates(),
        on=ERP_PART_ID,
        how='inner'
    )

    matched_per_id = df_erp_with_additional_id.merge(
        tru[TRU_MATCH_COLS],
        left_on=['SRC_SYS_CD', 'PLNT_CD', ERP_MAT_NUM, TRU_SPEC_ID],
        right_on=['SRC_SYS_CD', 'PLNT_CD', TRU_MAT_NUM, TRU_SPEC_ID],
        how='inner'
    )

    # Match per description
    if not (reference_table['text_for_matching_erp'].isnull().all() or
            reference_table['text_for_matching_tru'].isnull().all()):
        reference_table_text = reference_table.dropna(subset=['text_for_matching_erp', 'text_for_matching_tru'])
        is_valid_ref = [min(len(str(x)), len(str(y))) > 5
                        for x, y in zip(reference_table_text['text_for_matching_erp'],
                                        reference_table_text['text_for_matching_tru'])]
        reference_table_text = reference_table_text[is_valid_ref]

        df_erp_with_additional_desc = erp[ERP_MATCH_COLS].merge(
            reference_table_text[['text_for_matching_erp', 'text_for_matching_tru']].drop_duplicates(),
            on='text_for_matching_erp',
            how='inner'
        )

        matched_per_desc = df_erp_with_additional_desc.merge(
            tru[TRU_MATCH_COLS],
            left_on=['SRC_SYS_CD', 'PLNT_CD', ERP_MAT_NUM, 'text_for_matching_tru'],
            right_on=['SRC_SYS_CD', 'PLNT_CD', TRU_MAT_NUM, 'text_for_matching_tru'],
            how='inner'
        )

        matched_per_desc = matched_per_desc[matched_per_id.columns]
    else:
        matched_per_desc = pd.DataFrame(columns=matched_per_id.columns)

    # Combine ID and description matches
    normal_matches = pd.concat([matched_per_id, matched_per_desc], ignore_index=True)

    if not normal_matches.empty:
        print(f"✅ Found {len(normal_matches)} normal matches")
        normal_matches[SCORE_COL] = 1
        normal_matches[UNIFIED_MC_COL] = normal_matches[f'{ERP_MAT_NUM}_original'].copy()
        normal_matches['is_matched'] = True
        normal_matches['Matching Reason'] = round_name
        normal_matches['confidence'] = 'high'
        normal_matches = add_matches_bundles(normal_matches, bundles, tru)

        matches = pd.concat([matches, normal_matches], ignore_index=True)

    # ✅ Deduplicate
    nd = matches.duplicated(subset=NON_DUPLICATES_SET).sum()
    if nd > 0:
        print(f"⚠️ {nd} duplicates found. Deduplicating...")
        matches.drop_duplicates(subset=NON_DUPLICATES_SET, inplace=True)

    # 🕓 Report time and return
    assign_round_name_and_report_time(matches, match_round_name, start)

    df_erp_to_match, df_tru_to_match = get_data_yet_to_match(matches, erp, tru)

    return matches, df_erp_to_match, df_tru_to_match, last_match_round + 1
