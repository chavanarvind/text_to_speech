required_cols = [
    'CMPNT_CAT_CD_DESC',
    'CMPNT_MATL_DESC',
    'CMPNT_MATL_TYPE_CD',
    'CMPNT_UOM_CD',
    'Final Category',
    'MATL_SHRT_DESC'
]

def process_one_file(file):
    try:
        print(f" Processing: {os.path.basename(file)}")
        start = time.time()

        all_cols = pl.read_parquet(file).columns
        df = pl.read_parquet(file, columns=[col for col in required_cols if col in all_cols])

        for col in required_cols:
            if col not in df.columns:
                df = df.with_columns(pl.lit(None).alias(col))

        # Phase 1: Clean MATL_SHRT_DESC
        df = df.with_columns([
            pl.col("MATL_SHRT_DESC").map_elements(lambda x: clean_text(expand_abbreviations(x)) if x else None, return_dtype=pl.Utf8)
        ])

        # Phase 2: Clean CMPNT_MATL_DESC and combine
        df = df.with_columns([
            pl.col("CMPNT_MATL_DESC").map_elements(lambda x: clean_text(expand_abbreviations(x)) if x else None, return_dtype=pl.Utf8),
            (pl.col("MATL_SHRT_DESC").fill_null('') + pl.lit(" ") + pl.col("CMPNT_MATL_DESC").fill_null(''))
                .str.strip_chars()
                .alias("MATL_SHRT_DESC_AND_CMPNT_MATL_DESC")
        ])

        # Phase 3: Clean category and group
        df = df.with_columns([
            pl.col("CMPNT_CAT_CD_DESC").map_elements(lambda x: clean_text(x.lower()) if x else None, return_dtype=pl.Utf8),
            pl.col("CMPNT_UOM_CD").map_elements(lambda x: get_unit_group(x), return_dtype=pl.Utf8)
        ])

        df.write_parquet(file)
        print(f"Done: {os.path.basename(file)} |  {time.time() - start:.2f}s")

    except Exception as e:
        print(f" Failed: {os.path.basename(file)} -> {e}")
