import gradio as gr
import os
import requests
import time

# Constants (fill with your own values)
SPEECH_KEY = os.getenv("SPEECH_KEY")  # Or hardcode your Azure key here
ENDPOINT = "https://eastus.api.cognitive.microsoft.com"
API_VERSION = "2025-05-20"

def translate_video(video_path, source_lang, target_lang):
    logs = []
    logs.append("Starting translation process...")

    VIDEO_URL = os.getenv("VIDEO_SAS_URL")
    if not VIDEO_URL:
        return "Set VIDEO_SAS_URL as environment variable with your blob SAS URL"
    logs.append(f"Using VIDEO_SAS_URL: {VIDEO_URL}")

    headers = {
        "Ocp-Apim-Subscription-Key": SPEECH_KEY,
        "Content-Type": "application/json",
        "Operation-Id": "CreateOp01"
    }

    translation_name = "GradioTransDemo"
    create_url = f"{ENDPOINT}/videotranslation/translations/{translation_name}?api-version={API_VERSION}"
    create_payload = {
        "displayName": "Gradio Video Translation",
        "input": {
            "sourceLocale": source_lang,
            "targetLocale": target_lang,
            "voiceKind": "PlatformVoice",
            "videoFileUrl": VIDEO_URL
        }
    }

    logs.append("Creating translation object...")
    r = requests.put(create_url, headers=headers, json=create_payload)
    logs.append(f"Create response: {r.status_code} {r.text}")
    if r.status_code not in [200, 201]:
        return "\n".join(logs + ["Create failed."])

    headers["Operation-Id"] = "StartIter01"
    start_url = f"{ENDPOINT}/videotranslation/translations/{translation_name}/iterations/Initial?api-version={API_VERSION}"
    iter_payload = {
        "speakerCount": 1,
        "exportSubtitleInVideo": True,
        "enableLipSync": False
    }

    logs.append("Starting translation iteration...")
    r = requests.put(start_url, headers=headers, json=iter_payload)
    logs.append(f"Start iteration response: {r.status_code} {r.text}")
    if r.status_code not in [200, 202]:
        return "\n".join(logs + ["Start iteration failed."])

    status_url = f"{ENDPOINT}/videotranslation/operations/StartIter01?api-version={API_VERSION}"
    logs.append("Polling for translation status...")
    while True:
        r = requests.get(status_url, headers={"Ocp-Apim-Subscription-Key": SPEECH_KEY})
        data = r.json()
        status = data.get("status")
        logs.append(f"Current status: {status}")
        if status in ["Succeeded", "Failed"]:
            break
        time.sleep(10)

    if status == "Failed":
        return "\n".join(logs + ["Translation failed."])

    result_url = f"{ENDPOINT}/videotranslation/translations/{translation_name}?api-version={API_VERSION}"
    r = requests.get(result_url, headers={"Ocp-Apim-Subscription-Key": SPEECH_KEY})
    logs.append(f"Final result fetch response: {r.status_code} {r.text}")
    try:
        result = r.json()["latestIteration"]["result"]
        translated_url = result["translatedVideoFileUrl"]
        logs.append(f"Translated video URL: {translated_url}")
        return "\n".join(logs + ["\nFinal Translated Video URL:", translated_url])
    except Exception as e:
        logs.append(f"Failed to parse translated URL: {str(e)}")
        return "\n".join(logs)

def gradio_interface(video, source_lang, target_lang):
    return translate_video(video, source_lang, target_lang)

iface = gr.Interface(
    fn=gradio_interface,
    inputs=[
        gr.Video(label="Upload Video (.mp4)"),
        gr.Textbox(label="Source Language (e.g., en-US)", value="en-US"),
        gr.Textbox(label="Target Language (e.g., es-ES)", value="es-ES")
    ],
    outputs=gr.Textbox(label="Logs and Translated Video URL"),
    title="Azure Video Translator (Preview with Logs)"
)

iface.launch()
