import azure.cognitiveservices.speech as speechsdk
import json

# Replace with your Azure Speech Service credentials
SPEECH_KEY = "<YOUR_AZURE_SPEECH_KEY>"
SERVICE_REGION = "<YOUR_SERVICE_REGION>"

def text_to_speech_with_offsets(input_text_file, audio_output_path, offsets_output_path):
    """
    Convert text to speech using Azure TTS and generate word offset data.

    Args:
        input_text_file (str): Path to the input text file.
        audio_output_path (str): Path to save the output audio file.
        offsets_output_path (str): Path to save the word offsets JSON file.
    """
    # Create a Speech Config object
    speech_config = speechsdk.SpeechConfig(subscription=SPEECH_KEY, region=SERVICE_REGION)
    speech_config.speech_synthesis_output_format = speechsdk.SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3

    # Create an audio configuration to output to a file
    audio_config = speechsdk.audio.AudioOutputConfig(filename=audio_output_path)

    # Create a speech synthesizer
    synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config, audio_config=audio_config)

    # Load the text from the input file
    with open(input_text_file, "r", encoding="utf-8") as file:
        text = file.read()

    # Set up the word boundary event handler to collect offsets
    word_offsets = []

    def word_boundary_handler(evt):
        word_offsets.append({
            "Text": evt.text,
            "AudioOffset": evt.audio_offset / 10000,  # Convert 100-nanosecond units to milliseconds
            "Duration": evt.duration / 10000  # Convert 100-nanosecond units to milliseconds
        })

    synthesizer.synthesis_word_boundary.connect(word_boundary_handler)

    # Perform text-to-speech synthesis
    print("Starting synthesis...")
    result = synthesizer.speak_text_async(text).get()

    # Check the result
    if result.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
        print(f"Speech synthesis succeeded. Audio saved to: {audio_output_path}")

        # Save word offsets to a JSON file
        with open(offsets_output_path, "w", encoding="utf-8") as json_file:
            json.dump(word_offsets, json_file, ensure_ascii=False, indent=4)
        print(f"Word offsets saved to: {offsets_output_path}")
    else:
        print(f"Speech synthesis failed: {result.reason}")
        if result.error_details:
            print(f"Error details: {result.error_details}")

# Input and output file paths
input_text_file = "input_text.txt"  # Path to your text file
audio_output_path = "output_audio.mp3"  # Path to save the audio file
offsets_output_path = "word_offsets.json"  # Path to save the word offsets

# Run the text-to-speech conversion
text_to_speech_with_offsets(input_text_file, audio_output_path, offsets_output_path)
