import webview
import time
import pysrt
import pygame
import sys
import os
import threading

class AudioPlayer:
    def __init__(self, audio_file, subtitles_file):
        self.audio_file = audio_file
        self.subtitles = self.load_subtitles(subtitles_file)
        self.is_paused = False
        self.is_playing = False
        self.current_subtitle_index = 0
        self.start_time = None
        self.paused_time = 0

    def load_subtitles(self, subtitles_file):
        # Load subtitles and convert start/end times to seconds for easy comparison
        subs = pysrt.open(subtitles_file)
        subtitle_data = []
        for sub in subs:
            subtitle_data.append({
                'start': sub.start.ordinal / 1000,  # Start time in seconds
                'end': sub.end.ordinal / 1000,      # End time in seconds
                'text': sub.text
            })
        return subtitle_data

    def play_audio(self):
        # Initialize Pygame and play audio
        pygame.mixer.init()
        pygame.mixer.music.load(self.audio_file)
        pygame.mixer.music.play()
        self.start_time = time.time()

    def stop_audio(self):
        self.is_playing = False
        self.is_paused = False
        self.paused_time = 0
        pygame.mixer.music.stop()

    def set_audio_time(self, start_time, end_time):
        self.start_time = time.time() - start_time
        self.play_audio()
        webview.evaluate_js(f"highlightRange({start_time}, {end_time});")

    def update_subtitles(self):
        # Logic for synchronizing subtitles with audio
        current_time = time.time() - self.start_time
        if self.current_subtitle_index < len(self.subtitles):
            subtitle = self.subtitles[self.current_subtitle_index]
            if subtitle['start'] <= current_time <= subtitle['end']:
                self.highlight_text(subtitle['text'])
                self.current_subtitle_index += 1

    def highlight_text(self, text):
        # Call the frontend JavaScript to highlight the text
        webview.evaluate_js(f'highlightNextOccurrence("{text}")')


def create_window():
    audio_file = 'nic/sml_ges.mp3'
    subtitles_file = 'nic/sml_ges.srt'
    audio_player = AudioPlayer(audio_file, subtitles_file)

    html_file = 'nic/clean_output.html'

    window = webview.create_window('Audio Player with Text Highlighting', html_file)
    webview.start()

    # Expose the set_audio_time function to JavaScript
    webview.api.set_audio_time = audio_player.set_audio_time
    webview.api.update_subtitles = audio_player.update_subtitles


# Make sure webview runs on the main thread
if __name__ == "__main__":
    create_window()
