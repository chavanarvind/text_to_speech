# üî• Debug block after df_erp_with_additional_id creation

df_erp_with_additional_id = erp[ERP_MATCH_COLS].merge(
    reference_table[[ERP_PART_ID, TRU_SPEC_ID]].drop_duplicates(),
    on=ERP_PART_ID,
    how='inner'
)

# ‚úÖ Debug for target record
target_cmpnt = '30055433'
target_child = 'PC-008694'
debug_mode = (
    df_erp_with_additional_id['CMPNT_MATL_NUM'].eq(target_cmpnt).any() or 
    tru['CHILD_NM'].eq(target_child).any()
)

if debug_mode:
    print("\n=== DEBUG: Filtering for CMPNT_MATL_NUM:", target_cmpnt, "and CHILD_NM:", target_child)

    print("\n--- ERP + REF MERGE RESULT ---")
    print(df_erp_with_additional_id.query(f"CMPNT_MATL_NUM == '{target_cmpnt}'"))

    print("\n--- TRU ORIGINAL ---")
    print(tru.query(f"CHILD_NM == '{target_child}'"))

    print("\n‚úÖ Checking key alignments and datatypes")
    erp_debug = df_erp_with_additional_id.query("CMPNT_MATL_NUM == '30055433'")
    tru_debug = tru[TRU_MATCH_COLS].query("CHILD_NM == 'PC-008694'")

    if not erp_debug.empty and not tru_debug.empty:
        print("\nERP SRC_SYS_CD:", erp_debug['SRC_SYS_CD'].unique())
        print("TRU SRC_SYS_CD:", tru_debug['SRC_SYS_CD'].unique())

        print("\nERP PLNT_CD:", erp_debug['PLNT_CD'].unique())
        print("TRU PLNT_CD:", tru_debug['PLNT_CD'].unique())

        print("\nERP_MAT_NUM:", erp_debug['CMPNT_MATL_NUM'].unique())
        print("TRU_SPEC_ID:", tru_debug[TRU_SPEC_ID].unique())

        # Normalize keys
        erp_ids = set(erp_debug['CMPNT_MATL_NUM'].astype(str).str.strip())
        tru_ids = set(tru_debug[TRU_SPEC_ID].astype(str).str.strip())
        print("\nNormalized ERP IDs:", erp_ids)
        print("Normalized TRU IDs:", tru_ids)
        print("‚úÖ Overlap:", erp_ids.intersection(tru_ids))
    else:
        print("\n‚ö†Ô∏è ERP or TRU debug data is empty.")
