def match_by_reference_table(erp: pd.DataFrame,  
                             tru: pd.DataFrame,  
                             reference_table: pd.DataFrame,  
                             last_match_round: int,  
                             round_name: str,  
                             bundles):  
    '''  
    Match records using a reference table containing ERP Part ID - TRU Spec mappings
    with text descriptions. Includes debug tracing for specific records.
    '''  
    match_round_name = f'{last_match_round + 1}: {round_name}'  
    print(f'\n=== MATCH ROUND {match_round_name} ===')  
    start = time.time()  
    
    # 🔥 Debug block after df_erp_with_additional_id creation
    print("\n✅ DEBUG 7a: Before ERP + REF merge")
    print(f"Checking TRU for PC-008694 before ERP+TRU merge in {round_name}")
    print(tru.query("CHILD_NM == 'PC-008694'")[["CHILD_NM", TRU_SPEC_ID, TRU_MAT_NUM]])

    df_erp_with_additional_id = erp[ERP_MATCH_COLS].merge(
    reference_table[[ERP_PART_ID, TRU_SPEC_ID]].drop_duplicates(),
    on=ERP_PART_ID,
    how='inner')

    # ✅ Debug for target record
    target_cmpnt = '30055433'
    target_child = 'PC-008694'
    debug_mode = (
    df_erp_with_additional_id['CMPNT_MATL_NUM'].eq(target_cmpnt).any() or 
    tru['CHILD_NM'].eq(target_child).any())

    if debug_mode:
        print("\n=== DEBUG: Filtering for CMPNT_MATL_NUM:", target_cmpnt, "and CHILD_NM:", target_child)

        print("\n--- ERP + REF MERGE RESULT ---")
        print(df_erp_with_additional_id.query(f"CMPNT_MATL_NUM == '{target_cmpnt}'"))

        print("\n--- TRU ORIGINAL ---")
        print(tru.query(f"CHILD_NM == '{target_child}'"))

        print("\n✅ Checking key alignments and datatypes")
        erp_debug = df_erp_with_additional_id.query("CMPNT_MATL_NUM == '30055433'")
        tru_debug = tru[TRU_MATCH_COLS].query("CHILD_NM == 'PC-008694'")

        if not erp_debug.empty and not tru_debug.empty:
            print("\nERP SRC_SYS_CD:", erp_debug['SRC_SYS_CD'].unique())
            print("TRU SRC_SYS_CD:", tru_debug['SRC_SYS_CD'].unique())

            print("\nERP PLNT_CD:", erp_debug['PLNT_CD'].unique())
            print("TRU PLNT_CD:", tru_debug['PLNT_CD'].unique())

            print("\nERP_MAT_NUM:", erp_debug['CMPNT_MATL_NUM'].unique())
            print("TRU_SPEC_ID:", tru_debug[TRU_SPEC_ID].unique())

            # Normalize keys
            erp_ids = set(erp_debug['CMPNT_MATL_NUM'].astype(str).str.strip())
            tru_ids = set(tru_debug[TRU_SPEC_ID].astype(str).str.strip())
            print("\nNormalized ERP IDs:", erp_ids)
            print("Normalized TRU IDs:", tru_ids)
            print("✅ Overlap:", erp_ids.intersection(tru_ids))
        else:
            print("\n⚠️ ERP or TRU debug data is empty.")

   
    print("\n=== END DEBUG ===\n")
    print("\n✅ DEBUG 7b: Before ERP+TRU merge")
    print(f"Checking ERP for CMPNT_MATL_NUM = 30055433 in {round_name}")
    print(df_erp_with_additional_id.query("CMPNT_MATL_NUM == '30055433'")[[
    ERP_PART_ID, ERP_MAT_NUM, 'SRC_SYS_CD', 'PLNT_CD'
]])
    print(f"Checking TRU for PC-008694 before ERP+TRU merge in {round_name}")
    print(tru.query("CHILD_NM == 'PC-008694'")[[
    "CHILD_NM", TRU_SPEC_ID, TRU_MAT_NUM, "SRC_SYS_CD", "PLNT_CD"]])

    matched_per_id = df_erp_with_additional_id.merge(
        tru[TRU_MATCH_COLS],
        left_on=['SRC_SYS_CD', 'PLNT_CD', ERP_MAT_NUM, TRU_SPEC_ID],
        right_on=['SRC_SYS_CD', 'PLNT_CD', TRU_MAT_NUM, TRU_SPEC_ID],
        how='inner'
    )
    print("\n✅ DEBUG 7c: After ERP+TRU merge")
    print(matched_per_id.query("CHILD_NM == 'PC-008694' or CMPNT_MATL_NUM == '30055433'")[[
    ERP_PART_ID, TRU_SPEC_ID, "CMPNT_MATL_NUM", "CHILD_NM", "SRC_SYS_CD", "PLNT_CD"]])

    if matched_per_id.query("CHILD_NM == 'PC-008694'").empty:
      print("❌ ALERT: PC-008694 did not match in this merge")
    else:
      print("✅ SUCCESS: PC-008694 matched in this merge")
    # Match per description
    if not (reference_table['text_for_matching_erp'].isnull().all() or 
            reference_table['text_for_matching_tru'].isnull().all()):
        reference_table_text = reference_table.dropna(subset=['text_for_matching_erp', 'text_for_matching_tru'])
        is_valid_ref = [min(len(x), len(y)) > 5 for x, y in 
                        zip(reference_table_text['text_for_matching_erp'],
                            reference_table_text['text_for_matching_tru'])]
        reference_table_text = reference_table_text[is_valid_ref]
        df_erp_with_additional_desc = erp[ERP_MATCH_COLS].merge(
            reference_table_text[['text_for_matching_erp', 'text_for_matching_tru']].drop_duplicates(),
            on='text_for_matching_erp',
            how='inner'
        )
        matched_per_desc = df_erp_with_additional_desc.merge(
            tru[TRU_MATCH_COLS],
            left_on=['SRC_SYS_CD', 'PLNT_CD', ERP_MAT_NUM, 'text_for_matching_tru'],
            right_on=['SRC_SYS_CD', 'PLNT_CD', TRU_MAT_NUM, 'text_for_matching_tru'],
            how='inner'
        )
        matched_per_desc = matched_per_desc[matched_per_id.columns]
    else:
        matched_per_desc = pd.DataFrame(columns=matched_per_id.columns)

    if matched_per_id.empty and matched_per_desc.empty:
        print(f"No reference table matches found in round {match_round_name}")
        return pd.DataFrame(), erp, tru, last_match_round + 1

    matches = pd.concat([matched_per_id, matched_per_desc], ignore_index=True)
    matches[SCORE_COL] = 1
    matches[UNIFIED_MC_COL] = matches[f'{ERP_MAT_NUM}_original'].copy()
    matches['is_matched'] = True
    matches['Matching Reason'] = round_name
    matches['confidence'] = 'high'
    matches = add_matches_bundles(matches, bundles, tru)
    matches.drop_duplicates(subset=NON_DUPLICATES_SET, inplace=True)
    assign_round_name_and_report_time(matches, match_round_name, start)

    df_erp_to_match, df_tru_to_match = get_data_yet_to_match(matches, erp, tru)

    return matches, df_erp_to_match, df_tru_to_match, last_match_round + 1
