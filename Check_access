import streamlit as st
import fitz  # PyMuPDF
from PIL import Image
from pyzbar.pyzbar import decode
import io
import re

st.set_page_config(page_title="QR & Barcode Verifier", layout="wide")
st.title("üì¶ QR & Barcode Verification from Artwork PDF")

# --- File Upload ---
uploaded_file = st.file_uploader("Upload AW PDF File", type=["pdf"])

# --- Helper Functions ---
def extract_qr_gtin(barcodes):
    for b in barcodes:
        data = b.data.decode("utf-8")
        if "kenvue" in data:
            match = re.search(r"/01/(\d{14})", data)
            if match:
                return match.group(1), data, b
    return None, None, None

def extract_ean_gtin(barcodes):
    for b in barcodes:
        code = b.data.decode("utf-8")
        if code.isdigit() and len(code) == 13:
            return code.zfill(14)  # Patch to 14 digits
    return None

# --- Process PDF ---
if uploaded_file:
    doc = fitz.open(stream=uploaded_file.read(), filetype="pdf")
    page = doc.load_page(0)
    zoom = 2
    mat = fitz.Matrix(zoom, zoom)
    pix = page.get_pixmap(matrix=mat)
    img = Image.open(io.BytesIO(pix.tobytes("png")))

    st.image(img, caption="Scanned Page Image", use_column_width=True)

    barcodes = decode(img)

    qr_gtin, qr_url, qr_obj = extract_qr_gtin(barcodes)
    ean_gtin = extract_ean_gtin(barcodes)

    st.subheader("üîç Decoded Results")
    st.write(f"**QR Code URL**: `{qr_url}`" if qr_url else "‚ùå QR Code not found or invalid format")
    st.write(f"**GTIN from QR Code**: `{qr_gtin}`" if qr_gtin else "‚ùå GTIN not found in QR")
    st.write(f"**GTIN from Barcode (EAN-13)**: `{ean_gtin}`" if ean_gtin else "‚ùå EAN-13 barcode not found")

    if qr_obj:
        # --- QR Dimension Check ---
        dpi = 72 * zoom  # zoom=2 --> 144 DPI
        mm_per_pixel = 25.4 / dpi
        width_mm = qr_obj.rect.width * mm_per_pixel
        height_mm = qr_obj.rect.height * mm_per_pixel

        st.subheader("üìè QR Code Size Check")
        st.write(f"QR Code Dimensions: **{width_mm:.2f} mm √ó {height_mm:.2f} mm**")

        if width_mm >= 15.621 and height_mm >= 15.621:
            st.success("‚úÖ QR code size is within acceptable limits.")
        else:
            st.error("‚ùå QR code size is too small. Minimum required: 15.621 mm √ó 15.621 mm")

    if qr_gtin and ean_gtin:
        if qr_gtin == ean_gtin:
            st.success("‚úÖ GTIN from QR matches the Barcode (EAN-13)")
            result = {
                "QR_GTIN": qr_gtin,
                "Barcode_EAN13": ean_gtin,
                "Match": True,
                "Comment": "GTIN matches EAN-13"
            }
        else:
            st.error("‚ùå GTIN mismatch between QR and Barcode")
            result = {
                "QR_GTIN": qr_gtin,
                "Barcode_EAN13": ean_gtin,
                "Match": False,
                "Comment": "GTIN does not match EAN-13"
            }
        st.json(result)
    else:
        st.warning("Please ensure both QR and EAN-13 barcode are visible on the first page.")
