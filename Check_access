
import streamlit as st
import fitz  # PyMuPDF
from PIL import Image
from pyzbar.pyzbar import decode
import io
import re
import os

st.set_page_config(page_title="QR & Barcode Verifier", layout="wide")
st.title("üì¶ QR & Barcode Verification from Artwork PDF")

# --- Optional: Add DLL directory (if needed manually) ---
try:
    dll_path = os.path.dirname(__file__)
    os.add_dll_directory(dll_path)
except Exception as e:
    st.warning("DLL path couldn't be added. Make sure libzbar-64.dll is in script directory.")

# --- File Upload ---
uploaded_file = st.file_uploader("Upload AW PDF File", type=["pdf"])

# --- Helper Functions ---
def extract_qr_gtin(barcodes):
    for b in barcodes:
        data = b.data.decode("utf-8")
        if "kenvue" in data:
            match = re.search(r"/01/(\d{14})", data)
            if match:
                return match.group(1), data, b
    return None, None, None

def extract_ean_gtin(barcodes):
    for b in barcodes:
        code = b.data.decode("utf-8")
        if code.isdigit() and len(code) == 13:
            return code.zfill(14)  # Patch to 14 digits
    return None

# --- Process PDF ---
if uploaded_file:
    try:
        doc = fitz.open(stream=uploaded_file.read(), filetype="pdf")
        page = doc.load_page(0)
        zoom = 2
        mat = fitz.Matrix(zoom, zoom)
        pix = page.get_pixmap(matrix=mat)
        img = Image.open(io.BytesIO(pix.tobytes("png")))

        st.image(img, caption="Scanned Page Image", use_column_width=True)

        try:
            barcodes = decode(img)
        except OSError as dll_error:
            st.error("‚ùå Failed to load 'libzbar-64.dll'. Please ensure it is present in the app folder.")
            st.stop()

        qr_gtin, qr_url, qr_obj = extract_qr_gtin(barcodes)
        ean_gtin = extract_ean_gtin(barcodes)

        st.subheader("üîç Decoded Results")
        st.write(f"**QR Code URL**: `{qr_url}`" if qr_url else "‚ùå QR Code not found or invalid format")
        st.write(f"**GTIN from QR Code**: `{qr_gtin}`" if qr_gtin else "‚ùå GTIN not found in QR")
        st.write(f"**GTIN from Barcode (EAN-13)**: `{ean_gtin}`" if ean_gtin else "‚ùå EAN-13 barcode not found")

        if qr_obj:
            # --- QR Dimension Check ---
            dpi = 72 * zoom  # zoom=2 --> 144 DPI
            mm_per_pixel = 25.4 / dpi
            width_mm = qr_obj.rect.width * mm_per_pixel
            height_mm = qr_obj.rect.height * mm_per_pixel

            st.subheader("üìè QR Code Size Check")
            st.write(f"QR Code Dimensions: **{width_mm:.2f} mm √ó {height_mm:.2f} mm**")

            if width_mm >= 15.621 and height_mm >= 15.621:
                st.success("‚úÖ QR code size is within acceptable limits.")
            else:
                st.error("‚ùå QR code size is too small. Minimum required: 15.621 mm √ó 15.621 mm")

        if qr_gtin and ean_gtin:
            if qr_gtin == ean_gtin:
                st.success("‚úÖ GTIN from QR matches the Barcode (EAN-13)")
                result = {
                    "QR_GTIN": qr_gtin,
                    "Barcode_EAN13": ean_gtin,
                    "Match": True,
                    "Comment": "GTIN matches EAN-13"
                }
            else:
                st.error("‚ùå GTIN mismatch between QR and Barcode")
                result = {
                    "QR_GTIN": qr_gtin,
                    "Barcode_EAN13": ean_gtin,
                    "Match": False,
                    "Comment": "GTIN does not match EAN-13"
                }
            st.json(result)
        else:
            st.warning("Please ensure both QR and EAN-13 barcode are visible on the first page.")

    except Exception as e:



2025-08-01 12:48:49.275 Uncaught app execution
Traceback (most recent call last):
  File "C:\Users\AChava05\OneDrive - Kenvue\AChava05\video_analysis\qr_env\lib\site-packages\pyzbar\zbar_library.py", line 58, in load
    dependencies, libzbar = load_objects(Path(''))
  File "C:\Users\AChava05\OneDrive - Kenvue\AChava05\video_analysis\qr_env\lib\site-packages\pyzbar\zbar_library.py", line 50, in load_objects
    deps = [
  File "C:\Users\AChava05\OneDrive - Kenvue\AChava05\video_analysis\qr_env\lib\site-packages\pyzbar\zbar_library.py", line 51, in <listcomp>
    cdll.LoadLibrary(str(directory.joinpath(dep)))
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\lib\ctypes\__init__.py", line 452, in LoadLibrary
    return self._dlltype(name)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\lib\ctypes\__init__.py", line 374, in __init__
    self._handle = _dlopen(self._name, mode)
FileNotFoundError: Could not find module 'libiconv.dll' (or one of its dependencies). Try using the full path with constructor syntax.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\AChava05\OneDrive - Kenvue\AChava05\video_analysis\qr_env\lib\site-packages\streamlit\runtime\scriptrunner\exec_code.py", line 128, in exec_func_with_error_handling
    result = func()
  File "C:\Users\AChava05\OneDrive - Kenvue\AChava05\video_analysis\qr_env\lib\site-packages\streamlit\runtime\scriptrunner\script_runner.py", line 669, in code_to_exec
    exec(code, module.__dict__)  # noqa: S102
  File "C:\Users\AChava05\OneDrive - Kenvue\AChava05\video_analysis\qr_verifier_app.py", line 5, in <module>
    from pyzbar.pyzbar import decode
  File "C:\Users\AChava05\OneDrive - Kenvue\AChava05\video_analysis\qr_env\lib\site-packages\pyzbar\pyzbar.py", line 7, in <module>  
    from .wrapper import (
  File "C:\Users\AChava05\OneDrive - Kenvue\AChava05\video_analysis\qr_env\lib\site-packages\pyzbar\wrapper.py", line 151, in <module>
    zbar_version = zbar_function(
  File "C:\Users\AChava05\OneDrive - Kenvue\AChava05\video_analysis\qr_env\lib\site-packages\pyzbar\wrapper.py", line 148, in zbar_function
    return prototype((fname, load_libzbar()))
  File "C:\Users\AChava05\OneDrive - Kenvue\AChava05\video_analysis\qr_env\lib\site-packages\pyzbar\wrapper.py", line 127, in load_libzbar
    libzbar, dependencies = zbar_library.load()
  File "C:\Users\AChava05\OneDrive - Kenvue\AChava05\video_analysis\qr_env\lib\site-packages\pyzbar\zbar_library.py", line 60, in load
    dependencies, libzbar = load_objects(Path(__file__).parent)
  File "C:\Users\AChava05\OneDrive - Kenvue\AChava05\video_analysis\qr_env\lib\site-packages\pyzbar\zbar_library.py", line 50, in load_objects
    deps = [
  File "C:\Users\AChava05\OneDrive - Kenvue\AChava05\video_analysis\qr_env\lib\site-packages\pyzbar\zbar_library.py", line 51, in <listcomp>
    cdll.LoadLibrary(str(directory.joinpath(dep)))
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\lib\ctypes\__init__.py", line 452, in LoadLibrary
    return self._dlltype(name)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\lib\ctypes\__init__.py", line 374, in __init__
    self._handle = _dlopen(self._name, mode)
OSError: [WinError 193] %1 is not a valid Win32 application




        st.error(f"‚ùå Unexpected error: {e}")
