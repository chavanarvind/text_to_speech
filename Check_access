# üü£ Pre-merge debug for target record
target_cmpnt = '30055433'
target_child = 'PC-008694'

try:
    debug_mode = (
        df_erp_with_additional_id.get('CMPNT_MATL_NUM', pd.Series()).astype(str).eq(target_cmpnt).any() or
        df_erp_with_additional_id.get('TRU_SPEC_ID', pd.Series()).astype(str).eq(target_child).any()
    )
except Exception as e:
    debug_mode = False
    print(f"‚ö†Ô∏è Could not evaluate debug_mode due to: {e}")

if debug_mode:
    print("\n=== DEBUG: Pre-merge diagnostics for CMPNT_MATL_NUM:", target_cmpnt, "and CHILD_NM:", target_child, "===")

    # ‚úÖ ERP DEBUG
    if 'CMPNT_MATL_NUM' in df_erp_with_additional_id.columns:
        erp_debug = df_erp_with_additional_id.query(f"CMPNT_MATL_NUM == '{target_cmpnt}'")
        print("\n‚úÖ ERP DEBUG:")
        print(erp_debug if not erp_debug.empty else "‚ùå No ERP record for CMPNT_MATL_NUM =", target_cmpnt)
    else:
        print("‚ö†Ô∏è ERP table missing CMPNT_MATL_NUM column.")
        erp_debug = pd.DataFrame()

    # ‚úÖ TRU DEBUG
    if 'CHILD_NM' in tru.columns:
        tru_debug = tru[TRU_MATCH_COLS].query(f"CHILD_NM == '{target_child}'")
        print("\n‚úÖ TRU DEBUG:")
        print(tru_debug if not tru_debug.empty else "‚ùå No TRU record for CHILD_NM =", target_child)
    else:
        print("‚ö†Ô∏è TRU table missing CHILD_NM column.")
        tru_debug = pd.DataFrame()

    # ‚úÖ REF DEBUG
    if {'CMPNT_MATL_NUM', 'CHILD_NM'}.issubset(reference_table.columns):
        ref_debug = reference_table.query(f"CMPNT_MATL_NUM == '{target_cmpnt}' and CHILD_NM == '{target_child}'")
        print("\n‚úÖ REF TABLE DEBUG:")
        print(ref_debug if not ref_debug.empty else f"‚ùå No REF record for {target_cmpnt} -> {target_child}")
    else:
        print("‚ö†Ô∏è Reference table missing CMPNT_MATL_NUM and/or CHILD_NM columns.")
        ref_debug = pd.DataFrame()

    # ‚úÖ Extra Checks if both ERP & TRU have data
    if not erp_debug.empty and not tru_debug.empty:
        print("\nüîé Checking SRC_SYS_CD mismatches:")
        print("ERP SRC_SYS_CD:", erp_debug.get('SRC_SYS_CD', pd.Series()).unique())
        print("TRU SRC_SYS_CD:", tru_debug.get('SRC_SYS_CD', pd.Series()).unique())

        print("\nüîé Checking PLNT_CD mismatches:")
        print("ERP PLNT_CD:", erp_debug.get('PLNT_CD', pd.Series()).unique())
        print("TRU PLNT_CD:", tru_debug.get('PLNT_CD', pd.Series()).unique())

        print("\nüîé Checking CMPNT_MATL_NUM vs TRU_SPEC_ID key formatting:")
        print("ERP CMPNT_MATL_NUM:", erp_debug.get('CMPNT_MATL_NUM', pd.Series()).unique())
        print("TRU TRU_SPEC_ID:", tru_debug.get(TRU_SPEC_ID, pd.Series()).unique())

        print("\nüîé Datatypes for CMPNT_MATL_NUM and TRU_SPEC_ID:")
        print("ERP CMPNT_MATL_NUM dtype:", erp_debug['CMPNT_MATL_NUM'].dtype)
        print("TRU TRU_SPEC_ID dtype:", tru_debug[TRU_SPEC_ID].dtype)

        # Normalize IDs and compare
        erp_ids = set(erp_debug['CMPNT_MATL_NUM'].astype(str).str.strip())
        tru_ids = set(tru_debug[TRU_SPEC_ID].astype(str).str.strip())
        print("\nüü£ Normalized ERP IDs:", erp_ids)
        print("üü£ Normalized TRU IDs:", tru_ids)
        print("‚úÖ Overlap:", erp_ids.intersection(tru_ids))
    else:
        print("\n‚ö†Ô∏è Cannot check mismatches because one side is empty.")

    print("\n=== END DEBUG ===\n")
